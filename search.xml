<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Digital ocean 部署</title>
    <url>/2020/cket8yx190006alvg0nlx61dr/</url>
    <content><![CDATA[<h1 id="Node-js-Deployment"><a href="#Node-js-Deployment" class="headerlink" title="Node.js Deployment"></a>Node.js Deployment</h1><blockquote>
<p>Steps to deploy a Node.js app to DigitalOcean using PM2, NGINX as a reverse proxy and an SSL from LetsEncrypt</p>
</blockquote>
<h2 id="1-Sign-up-for-Digital-Ocean"><a href="#1-Sign-up-for-Digital-Ocean" class="headerlink" title="1. Sign up for Digital Ocean"></a>1. Sign up for Digital Ocean</h2><h2 id="2-Create-a-droplet-and-log-in-via-ssh"><a href="#2-Create-a-droplet-and-log-in-via-ssh" class="headerlink" title="2. Create a droplet and log in via ssh"></a>2. Create a droplet and log in via ssh</h2><p> I will be using the root user, but would suggest creating a new user</p>
<h2 id="3-Update-packages-amp-amp-Install-Node-NPM"><a href="#3-Update-packages-amp-amp-Install-Node-NPM" class="headerlink" title="3. Update packages &amp;&amp; Install Node/NPM"></a>3. Update packages &amp;&amp; Install Node/NPM</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line"></span><br><span class="line">sudo apt install nodejs</span><br><span class="line"></span><br><span class="line">node --version</span><br></pre></td></tr></table></figure>

<h2 id="4-Clone-your-project-from-Github"><a href="#4-Clone-your-project-from-Github" class="headerlink" title="4. Clone your project from Github"></a>4. Clone your project from Github</h2><p>There are a few ways to get your files on to the server, I would suggest using Git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> yourproject.git</span><br></pre></td></tr></table></figure>

<h3 id="5-Install-dependencies-and-test-app"><a href="#5-Install-dependencies-and-test-app" class="headerlink" title="5. Install dependencies and test app"></a>5. Install dependencies and test app</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> yourproject</span><br><span class="line">npm install</span><br><span class="line">npm start (or whatever your start <span class="built_in">command</span>)</span><br></pre></td></tr></table></figure>
<h2 id="6-Setup-PM2-process-manager-to-keep-your-app-running"><a href="#6-Setup-PM2-process-manager-to-keep-your-app-running" class="headerlink" title="6. Setup PM2 process manager to keep your app running"></a>6. Setup PM2 process manager to keep your app running</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm i pm2 -g</span><br><span class="line">pm2 start app (or whatever your file name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Other pm2 commands</span></span><br><span class="line">pm2 show app</span><br><span class="line">pm2 status</span><br><span class="line">pm2 restart app</span><br><span class="line">pm2 stop app</span><br><span class="line">pm2 logs (Show <span class="built_in">log</span> stream)</span><br><span class="line">pm2 flush (Clear logs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># To make sure app starts when reboot</span></span><br><span class="line">pm2 startup ubuntu</span><br></pre></td></tr></table></figure>
<h3 id="You-should-now-be-able-to-access-your-app-using-your-IP-and-port-Now-we-want-to-setup-a-firewall-blocking-that-port-and-setup-NGINX-as-a-reverse-proxy-so-we-can-access-it-directly-using-port-80-http"><a href="#You-should-now-be-able-to-access-your-app-using-your-IP-and-port-Now-we-want-to-setup-a-firewall-blocking-that-port-and-setup-NGINX-as-a-reverse-proxy-so-we-can-access-it-directly-using-port-80-http" class="headerlink" title="You should now be able to access your app using your IP and port. Now we want to setup a firewall blocking that port and setup NGINX as a reverse proxy so we can access it directly using port 80 (http)"></a>You should now be able to access your app using your IP and port. Now we want to setup a firewall blocking that port and setup NGINX as a reverse proxy so we can access it directly using port 80 (http)</h3><h2 id="7-Setup-ufw-firewall"><a href="#7-Setup-ufw-firewall" class="headerlink" title="7. Setup ufw firewall"></a>7. Setup ufw firewall</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw status</span><br><span class="line">sudo ufw allow ssh (Port 22)</span><br><span class="line">sudo ufw allow http (Port 80)</span><br><span class="line">sudo ufw allow https (Port 443)</span><br></pre></td></tr></table></figure>

<h2 id="8-Install-NGINX-and-configure"><a href="#8-Install-NGINX-and-configure" class="headerlink" title="8. Install NGINX and configure"></a>8. Install NGINX and configure</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br><span class="line"></span><br><span class="line">sudo nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<p>Add the following to the location part of the server block</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server_name yourdomain.com www.yourdomain.com;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://localhost:5000; <span class="comment">#whatever port your app runs on</span></span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    proxy_set_header Connection <span class="string">'upgrade'</span>;</span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check NGINX config</span></span><br><span class="line">sudo nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restart NGINX</span></span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>

<h3 id="You-should-now-be-able-to-visit-your-IP-with-no-port-port-80-and-see-your-app-Now-let’s-add-a-domain"><a href="#You-should-now-be-able-to-visit-your-IP-with-no-port-port-80-and-see-your-app-Now-let’s-add-a-domain" class="headerlink" title="You should now be able to visit your IP with no port (port 80) and see your app. Now let’s add a domain"></a>You should now be able to visit your IP with no port (port 80) and see your app. Now let’s add a domain</h3><h2 id="9-Add-domain-in-Digital-Ocean"><a href="#9-Add-domain-in-Digital-Ocean" class="headerlink" title="9. Add domain in Digital Ocean"></a>9. Add domain in Digital Ocean</h2><p>In Digital Ocean, go to networking and add a domain</p>
<p>Add an A record for @ and for www to your droplet</p>
<h2 id="Register-and-or-setup-domain-from-registrar"><a href="#Register-and-or-setup-domain-from-registrar" class="headerlink" title="Register and/or setup domain from registrar"></a>Register and/or setup domain from registrar</h2><p>Choose “Custom nameservers” and add these 3</p>
<ul>
<li>ns1.digitalocean.com</li>
<li>ns2.digitalocean.com</li>
<li>ns3.digitalocean.com</li>
</ul>
<p>It may take a bit to propogate</p>
<ol start="10">
<li>Add SSL with LetsEncrypt<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-certbot-nginx</span><br><span class="line">sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only valid for 90 days, test the renewal process with</span></span><br><span class="line">certbot renew --dry-run</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>Now visit <a href="https://yourdomain.com" target="_blank" rel="noopener">https://yourdomain.com</a> and you should see your Node app</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>devOps</tag>
      </tags>
  </entry>
  <entry>
    <title>OSINT-1  How to utilise search engines</title>
    <url>/2020/osint-1/</url>
    <content><![CDATA[<h1 id="OSINT-1-How-to-utilise-search-engines"><a href="#OSINT-1-How-to-utilise-search-engines" class="headerlink" title="OSINT-1  How to utilise search engines"></a>OSINT-1  How to utilise search engines</h1><blockquote>
<h3 id="Some-Operators"><a href="#Some-Operators" class="headerlink" title="Some Operators"></a>Some Operators</h3></blockquote>
<ul>
<li>“”<br>Force an exact-match search. The double quotation marks will help return results including keywords inside.</li>
<li>*<br>An asterisk character, known as a wildcard, to match one or more words in a phrase</li>
<li>OR<br>Search for X or Y. This will return results related to X or Y, or both. Note: The pipe ( | ) operator can also be used in place of “OR.”</li>
<li>AND<br>Similar to OR ( | ), can be used in place of “&amp;” Note: It doesn’t really make much difference for regular searches, as Google defaults to “AND” anyway. But it’s very useful when paired with other operators.<a id="more"></a></li>
<li>( )<br>Group multiple terms or search operators to control how the search is executed, like (A | B)</li>
<li>-<br>Exclude a term or phrase. In our example, any pages returned will be related to jobs but not Apple (the company).</li>
<li>define:<br>A dictionary built into Google, basically. This will display the meaning of a word in a card-like result.</li>
<li>cache:<br>Returns the most recent cached version of a web page (providing the page is indexed).</li>
<li>filetype:<br>Restrict results to those of a certain filetype. E.g., PDF, DOCX, TXT, PPT, CSV, xlsx,etc.</li>
<li>site:<br>Limit results to those from a specific website. For example, Phd site:cardiff.ac.uk, it will return phd related information in the Cardiff university website.</li>
<li>intitle:<br>Find pages with a certain word (or words) in the title. For example, intitle:Cardiff, any results containing the word “Cardiff” in the title tag will be returned.</li>
<li>intext:<br>Find pages containing a certain word (or words) somewhere in the content.</li>
<li>allintext:<br>Similar to “intext,” return results containing all of the specified words.</li>
<li>AROUND(X)<br>Find pages containing two words or phrases within X words of each other. For example, Cardiff AROUND(5) COMSC, must be present in the content and no further than five words apart.</li>
<li>year..year<br>Search for a range of numbers. Like Coronavirus 2019..2020</li>
<li>inurl:<br>Find pages with a certain word (or words) in the URL.</li>
</ul>
<hr>
<p>Go back to the previous versions of pages <a href="https://archive.org/web/" target="_blank" rel="noopener">Archive</a>/<a href="http://timetravel.mementoweb.org/" target="_blank" rel="noopener">TimeTravel</a><br>Resource for <a href="https://www.exploit-db.com/google-hacking-database" target="_blank" rel="noopener">Google Dorks</a></p>
<p><strong>OSINT ONE PRACTICE</strong></p>
<ol>
<li><p>Run one search to find results that include the exact phrase “I love Cardiff because” or “I love Swansea because”</p>
</li>
<li><p>Re-do the search looking for ‘love’ and ‘hate’ for both cities (so you should be getting four different kinds of results)</p>
</li>
<li><p>How long has a Plaid Cymru page existed on Wikipedia?</p>
</li>
<li><p>How much will a fender telecaster cost you in Glasgow in 2018 (via Gumtree)?</p>
</li>
<li><p>This is a picture that was tweeted and became a story in France in 2018-19. <a href="https://www.telerama.fr/sites/tr_master/files/styles/simplecrop1000/public/dm6wgm-xsaaviem_0.jpg?itok=ybyPVEUc&amp;sc=d770fd22e0ec64161a3683ab0433b41e" target="_blank" rel="noopener">https://www.telerama.fr/sites/tr_master/files/styles/simplecrop1000/public/dm6wgm-xsaaviem_0.jpg?itok=ybyPVEUc&amp;sc=d770fd22e0ec64161a3683ab0433b41e</a></p>
</li>
<li><p>It was posted with this accompanying text, <em>Ce soir à 17h40 rue Jean Lantier 75001 Paris. Voilà à quoi servent les impôts locaux des Parisiens à payer les agents de propreté à roupiller, on comprend pourquoi Paris est si dégueulasse</em>. Find the twitter handle of the person who posted it, how she describes herself in her profile and when she joined twitter.</p>
</li>
<li><p>Find someone renting a room in a house anywhere in the UK who doesn’t want any musicians moving in. What else do they not want?</p>
</li>
<li><p>Find the Jomec academic staff page as it looked at least five days ago</p>
</li>
<li><p>Find people discussing this youtube video online – the end of ‘Agile’ – but not on youtube. <a href="https://www.youtube.com/watch?v=a-BOSpxYJ9M" target="_blank" rel="noopener">https://www.youtube.com/watch?v=a-BOSpxYJ9M</a> </p>
</li>
<li><p>Find online coverage of Big Ben being rung for Brexit that doesn’t mention the Prime Minister</p>
</li>
<li><p>Find a list of suppliers used by Network Rail</p>
</li>
<li><p><a href="http://www.milliontall.com" target="_blank" rel="noopener">www.milliontall.com</a> doesn’t exist anymore. What colour was ‘milliontall’ written in, when it still ran?</p>
</li>
<li><p>Find any document from the HSE [the Irish NHS] marked ‘private and confidential’ that concerns a HSE investigation</p>
</li>
<li><p>Find 3 stories on Wales Online that mention Cardiff Crown Court and that were published in August 2019</p>
</li>
<li><p>A user identified as ‘Ronald G. Cufley’ reviewed the 7th edition of Bazzell on UK Amazon in December 2019. How long has he been offering customer reviews? Of what?</p>
</li>
<li><p>Find a forum where fans of the Cardiff City football team chat</p>
</li>
<li><p>Find the original twitter post by the Spanish police in July 2019 that this story is based on: <a href="https://www.bbc.com/news/world-europe-49248764" target="_blank" rel="noopener">https://www.bbc.com/news/world-europe-49248764</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技能</category>
      </categories>
      <tags>
        <tag>OSINT</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2020/about/</url>
    <content><![CDATA[<hr>
<blockquote>
<p>Studying Computational &amp; Data Journalism , Cardiff, the UK.</p>
</blockquote>
<h2 id="Ruoyu-Wang"><a href="#Ruoyu-Wang" class="headerlink" title="Ruoyu Wang"></a><strong>Ruoyu Wang</strong></h2><p><a href="https://github.com/Ruoyu-Klaus" target="_blank" rel="noopener">GitHub</a><br><a href="mailto:ruoyuwangruoyu@hotmail.com">Email</a></p>
<a id="more"></a>

<h2 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h2><blockquote>
<p>MSc <em>Cardiff University</em></p>
<p>MA <em>China University of Geoscience</em></p>
<p>BA <em>Wuhan Sports University</em></p>
</blockquote>
<h2 id="Skills-used-often"><a href="#Skills-used-often" class="headerlink" title="Skills used often"></a>Skills used often</h2><blockquote>
<p>*<em>Front-END *</em> ( HTML5, CSS3, JavaScript, React, Redux, Next.js, npm, D3.js )</p>
<p>*<em>BACK-END *</em>(node, express, koa, mongoDB, Mysql)</p>
<p><strong>Data Processing</strong>( Pandas, matplotlib, numpy, SQL, Regex, NLTK )</p>
<p><strong>Misc</strong> ( Tableau, bash, git, Photoshop/Premiere/Illustrator )</p>
</blockquote>
<h2 id="Interests"><a href="#Interests" class="headerlink" title="Interests"></a>Interests</h2><ul>
<li>Sports enthusiast: Basketball, Swimming</li>
<li>Interested in photography, videography</li>
</ul>
<!-- <img src="#" alt="avatar" width="300" style="border-radius:50%"/> -->
]]></content>
      <tags>
        <tag>me</tag>
      </tags>
  </entry>
  <entry>
    <title>Beijing_data_vis_2</title>
    <url>/2020/cket8yx1e000balvgbsixh9u9/</url>
    <content><![CDATA[<h1 id="Data-Process"><a href="#Data-Process" class="headerlink" title="Data Process"></a>Data Process</h1><h4 id="接下来开始处理数据"><a href="#接下来开始处理数据" class="headerlink" title="接下来开始处理数据"></a>接下来开始处理数据</h4><blockquote>
<p>Loading Lib</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import re</span><br><span class="line">Import json</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tourism Attractions data clean</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hotSpot &#x3D; pd.read_csv(&quot;bj_hotspots.csv&quot;,encoding&#x3D;&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/cket8yx1e000balvgbsixh9u9/hotSpot.png" alt="hotSpots"></p>
<a id="more"></a>

<blockquote>
<p>剔除area那列多余的文字以及符号</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Function to clean the neighbourhood </span><br><span class="line">def Clean_areas(area): </span><br><span class="line">    # Search for blank-space in the name followed by </span><br><span class="line">    # any characters repeated any number of times </span><br><span class="line">    if(&quot;·&quot; in area):</span><br><span class="line">        area &#x3D; area.split(&#39;·&#39;)</span><br><span class="line">        return area[-1] </span><br><span class="line">    else: </span><br><span class="line">        # if clean up needed return the same name </span><br><span class="line">        return area</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hotSpot.loc[:,&quot;area&quot;] &#x3D; hotSpot[&quot;area&quot;].apply(Clean_areas)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>计算各个区域内热门景点数量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num_spots &#x3D; hotSpot.sort_values(by&#x3D;&quot;area&quot;).groupby(&quot;area&quot;).size()</span><br><span class="line">num_spots</span><br><span class="line"></span><br><span class="line">area</span><br><span class="line">东城区       19</span><br><span class="line">丰台区        5</span><br><span class="line">大兴区        1</span><br><span class="line">奥林匹克公园     1</span><br><span class="line">宣武区        1</span><br><span class="line">密云县        7</span><br><span class="line">平谷区        4</span><br><span class="line">延庆县        6</span><br><span class="line">怀柔区        7</span><br><span class="line">房山区        7</span><br><span class="line">昌平区        7</span><br><span class="line">明十三陵       3</span><br><span class="line">朝阳区        7</span><br><span class="line">海淀区       18</span><br><span class="line">石景山区       2</span><br><span class="line">西城区       15</span><br><span class="line">门头沟区       5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>覆盖为行政区域</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># rearrange spot&#39;s area matching with airbnb dataset</span><br><span class="line">def sort_spots_area(data):</span><br><span class="line">    for key,item in list(data.items()):</span><br><span class="line">        if key &#x3D;&#x3D; &#39;奥林匹克公园&#39;:</span><br><span class="line">            data[&#39;朝阳区&#39;] &#x3D; data[&#39;朝阳区&#39;]+item</span><br><span class="line">            del data[key]</span><br><span class="line">        if key &#x3D;&#x3D; &#39;明十三陵&#39;:</span><br><span class="line">            data[&#39;昌平区&#39;] &#x3D; data[&#39;昌平区&#39;]+item</span><br><span class="line">            del data[key]</span><br><span class="line">        if key &#x3D;&#x3D; &#39;宣武区&#39;:</span><br><span class="line">            data[&#39;西城区&#39;] &#x3D; data[&#39;西城区&#39;]+item</span><br><span class="line">            del data[key]</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">area</span><br><span class="line">东城区     19</span><br><span class="line">丰台区      5</span><br><span class="line">大兴区      1</span><br><span class="line">密云县      7</span><br><span class="line">平谷区      4</span><br><span class="line">延庆县      6</span><br><span class="line">怀柔区      7</span><br><span class="line">房山区      7</span><br><span class="line">昌平区     10</span><br><span class="line">朝阳区      8</span><br><span class="line">海淀区     18</span><br><span class="line">石景山区     2</span><br><span class="line">西城区     16</span><br><span class="line">门头沟区     5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Airbnb Lists data clean</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;打开listingForVis表格</span><br><span class="line">bjList &#x3D; pd.read_csv(&quot;listingForVis.csv&quot;,encoding&#x3D;&quot;utf-8&quot;,low_memory&#x3D;False)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打开listings表格</span><br><span class="line">bj_Lists &#x3D; pd.read_csv(&quot;listings.csv&quot;,encoding&#x3D;&quot;utf-8&quot;,low_memory&#x3D;False)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从listings表格中取出需要的信息</span><br><span class="line">ex_col &#x3D; bj_Lists.loc[:,[&quot;id&quot;,&quot;property_type&quot;,&quot;number_of_reviews&quot;,&quot;review_scores_rating&quot;,&quot;reviews_per_month&quot;]]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;合并表格</span><br><span class="line">bjListV2 &#x3D; bjList.merge(ex_col)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/cket8yx1e000balvgbsixh9u9/listsNaInfo.png" alt="listsNaInfo"></p>
<blockquote>
<p>移除价格异常值数据，控制在百分之2至百分之98之间。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># remove out liers</span><br><span class="line">outliers_low &#x3D; bjListV2[&quot;price&quot;].quantile(0.2)</span><br><span class="line">outliers_hi  &#x3D; bjListV2[&quot;price&quot;].quantile(0.98)</span><br><span class="line"># lists wihtout outliers in price</span><br><span class="line">bjListV2_filtered &#x3D; bjListV2[(bjListV2[&quot;price&quot;] &lt; outliers_hi) &amp; (bjListV2[&quot;price&quot;] &gt; outliers_low)]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清理neighbourhood列中的文字格式。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Function to clean the neighbourhood </span><br><span class="line">def Clean_names(neighbourhood): </span><br><span class="line">    # Search for blank-space in the name followed by </span><br><span class="line">    # any characters repeated any number of times </span><br><span class="line">    if re.search(&#39;\s.*&#39;, neighbourhood): </span><br><span class="line">  </span><br><span class="line">        # Extract the position of beginning of pattern </span><br><span class="line">        pos &#x3D; re.search(&#39;\s.*&#39;, neighbourhood).start() </span><br><span class="line">  </span><br><span class="line">        # return the cleaned name </span><br><span class="line">        return neighbourhood[:pos] </span><br><span class="line">  </span><br><span class="line">    else: </span><br><span class="line">        # if clean up needed return the same name </span><br><span class="line">        return neighbourhood </span><br><span class="line">        </span><br><span class="line">bjListV2_filtered.loc[:,&quot;neighbourhood&quot;] &#x3D; bjListV2_filtered[&quot;neighbourhood&quot;].apply(Clean_names)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>区域数量统计</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># count lists by areas</span><br><span class="line">num_by_area &#x3D; bjListV2_filtered.groupby(&quot;neighbourhood&quot;)[&quot;id&quot;].count()</span><br><span class="line">bjListV2_filtered.groupby(&quot;neighbourhood&quot;)[&quot;id&quot;].count()</span><br><span class="line"></span><br><span class="line">neighbourhood</span><br><span class="line">东城区     2780</span><br><span class="line">丰台区     1026</span><br><span class="line">大兴区      292</span><br><span class="line">密云县     1010</span><br><span class="line">平谷区      112</span><br><span class="line">延庆县     1195</span><br><span class="line">怀柔区      763</span><br><span class="line">房山区      193</span><br><span class="line">昌平区      425</span><br><span class="line">朝阳区     5620</span><br><span class="line">海淀区     1575</span><br><span class="line">石景山区     175</span><br><span class="line">西城区     1208</span><br><span class="line">通州区      355</span><br><span class="line">门头沟区      67</span><br><span class="line">顺义区      566</span><br><span class="line">Name: id, dtype: int64</span><br></pre></td></tr></table></figure>

<blockquote>
<p>区域房型统计</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type_ares &#x3D; bjListV2_filtered.groupby([&quot;neighbourhood&quot;,&quot;room_type&quot;])[&quot;id&quot;].agg([(&quot;id&quot;,&quot;count&quot;)])</span><br></pre></td></tr></table></figure>


<blockquote>
<p>评论统计，首先清理评论为空的数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># delete items with no scores</span><br><span class="line">score_List &#x3D; bjListV2_filtered.dropna(subset&#x3D;[&quot;review_scores_rating&quot;]).drop([&quot;neighbourhood_group&quot;,&quot;minimum_nights&quot;],axis&#x3D;&#39;columns&#39;)</span><br><span class="line"></span><br><span class="line"># check how many items in the lists</span><br><span class="line">score_List[&quot;id&quot;].count()</span><br><span class="line">10098</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总共有10098家，通过区域数量计算出区域平均评论数量和评分</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># average scores by areas</span><br><span class="line">mean_score &#x3D; score_List.groupby(&quot;neighbourhood&quot;)[&quot;review_scores_rating&quot;,&quot;number_of_reviews&quot;].mean().reset_index()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>把区域热点景点数据与区域评论数据合并</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># get 通州区 &amp; 顺义区	which has no hotspots data</span><br><span class="line">temp &#x3D; mean_score.sort_values(by&#x3D;&quot;neighbourhood&quot;).iloc[[13,15],:]</span><br><span class="line"></span><br><span class="line"># drop two areas with no spots info, temporarily</span><br><span class="line">#add new column to &#39;mean_score&#39; with the number of spots named &#39;num_spot&#39;</span><br><span class="line">add_spot &#x3D; mean_score.sort_values(by&#x3D;&quot;neighbourhood&quot;).drop([13,15],axis&#x3D;0)</span><br><span class="line">add_spot[&quot;num_spot&quot;] &#x3D; spots_list</span><br><span class="line"></span><br><span class="line"># merge temp to to mean_score</span><br><span class="line">final_spot &#x3D; pd.concat([add_spot, temp],sort&#x3D;True)</span><br><span class="line"></span><br><span class="line">final_spot &#x3D; final_spot.fillna(0).sort_values(by&#x3D;&quot;neighbourhood&quot;)</span><br><span class="line">final_spot</span><br></pre></td></tr></table></figure>

<blockquote>
<p>计算区域平均日房租，并加入到区域表格中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mean rent price by area</span><br><span class="line">mean_rent_area &#x3D; score_List.groupby([&quot;neighbourhood&quot;])[&quot;price&quot;].mean().reset_index()</span><br><span class="line">score_List.groupby([&quot;neighbourhood&quot;])[&quot;price&quot;].mean().reset_index()</span><br><span class="line"></span><br><span class="line"># add average rent to each area</span><br><span class="line">final_spot[&#39;rent&#39;] &#x3D; mean_rent_area[&#39;price&#39;]</span><br><span class="line">final_spot</span><br></pre></td></tr></table></figure>

<blockquote>
<p>读取链家房价数据，并将其加入到区域表格中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Housing price by areas</span><br><span class="line">bjPrice &#x3D; pd.read_csv(&quot;dataset&#x2F;housing_price_bj.csv&quot;,encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">bjPrice &#x3D; bjPrice.sort_values(by&#x3D;[&quot;name&quot;]).drop([9,17],axis&#x3D;0).reset_index().drop(&#39;index&#39;,axis&#x3D;1)</span><br><span class="line">bjPrice[&quot;name&quot;] &#x3D; neighbourhood</span><br><span class="line"></span><br><span class="line"># add Housing price to each area</span><br><span class="line">final_spot[&#39;housingPrice&#39;] &#x3D; bjPrice[&#39;transPrice&#39;]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将区域Airbnb数量加入区域表格中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># add Number of lists to each area</span><br><span class="line">final_spot[&#39;count&#39;] &#x3D; num_list[&#39;id&#39;]</span><br><span class="line">final_spot &#x3D; final_spot.rename(columns&#x3D;&#123;&#39;number_of_reviews&#39;: &#39;mean_reviews&#39;,&#39;review_scores_rating&#39;:&#39;mean_scores&#39;&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>处理百分位输出csv</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final_spot.round(1).to_csv(&#39;beijing_area_stat.csv&#39;,encoding&#x3D;&quot;utf-8&quot;,index&#x3D;None)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>计算相关性</p>
</blockquote>
<p><img src="/2020/cket8yx1e000balvgbsixh9u9/listcorr.png" alt="correlation"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vis</tag>
        <tag>python</tag>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>Beijing_data_vis_3</title>
    <url>/2020/cket8yx1g000calvgfp9f6215/</url>
    <content><![CDATA[<h1 id="Ready-to-code"><a href="#Ready-to-code" class="headerlink" title="Ready to code?"></a>Ready to code?</h1><blockquote>
<p>在开始之前，先简单复习一下d3如何与react兼容的。</p>
</blockquote>
<ul>
<li>d3, data-driven documents,是JavaScript的一个库，用来处理和展示数据的。通过直接操控DOM节点来进行对元素的增减修改</li>
<li>而react是采用一种非常聪明的方式来操控DOM节点—模拟并与实际DOM节点比较来更新。</li>
</ul>
<p><img src="/2020/cket8yx1g000calvgfp9f6215/react_DOM.png" alt="reactDOM"></p>
<p>因此如果‘不恰当’使用可能会引起相互干扰，不可预知的问题。就像一对夫妻一样，如果他们一直在做同一件事，那么麻烦不可避免:)</p>
<blockquote>
<p>最简单的方式就是给彼此留有活动空间！让老婆去看剧，自己洗碗</p>
</blockquote>
<p>因此我遵循的基本理念是<strong>让d3老婆独自在卧室看综艺，react自己在厨房管理自己的小组件。</strong> 等饭做好了，喊老婆吃饭。</p>
<a id="more"></a>

<p>言归正传，首先创建以个组件，用来收纳我们要用d3制作的图标。在返回一个内容为空的div，主要是为了让我们的d3知道要从哪里开始画图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reder()&#123;return &lt;div className&#x3D;&quot;viz&quot; &#x2F;&gt;&#125;</span><br></pre></td></tr></table></figure>

<p>利用componentDidMount和componentDidUpdate可以用载入更新的数据。因此，在其内部我们传入一个函数接受其更新的数据。这个函数正是我们的老婆大人—我们喊她来帮我们制图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">		draw(this.props)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidUpdate(prevProps,prevState)&#123;</span><br><span class="line">	 draw(this.props)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个新js文件，载入我们所需要的d3库.接下来就可以使用d3的方式来制图了，最后将其打包暴露出来即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import * as d3 from &#39;d3&#39;</span><br><span class="line"></span><br><span class="line">export default draw(props)&#x3D;&gt;&#123; d3.select(&#39;.viz&#39;)......&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vis</tag>
        <tag>python</tag>
        <tag>d3</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Beijing  Airbnb Visualisation</title>
    <url>/2020/beijing-vis/</url>
    <content><![CDATA[<h1 id="第一步，把数据搞到手"><a href="#第一步，把数据搞到手" class="headerlink" title="第一步，把数据搞到手"></a>第一步，把数据搞到手</h1><h2 id="Housing-Price-Beijing-Lianjia"><a href="#Housing-Price-Beijing-Lianjia" class="headerlink" title="Housing Price Beijing [Lianjia]"></a>Housing Price Beijing [Lianjia]</h2><blockquote>
<p>Beijing regional housing price from Lianjia.com<br><a href="'https://bj.lianjia.com/fangjia/'">Lianjia</a></p>
</blockquote>
<p>Based on the mean price of the used houses.<br>Start Date:25/3/2020;<br>Ruoyu Wang</p>
<p>进入链家北京二手房信息网站， 打开开发者工具，点击Network会惊奇的发现有一个有priceMap的请求文件，接下来就用python来简单抓取一下吧。</p>
<p><img src="/2020/beijing-vis/lianjia.png" alt="lianjia"></p>
<p>1.Import Libs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure>
<p>2.Define method</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_page(url,header) :</span><br><span class="line">    my_headers &#x3D; &#123;&quot;User-Agent&quot;: header&#125;</span><br><span class="line">    try:</span><br><span class="line">        page &#x3D; requests.get(url,headers &#x3D; my_headers) </span><br><span class="line">        return page</span><br><span class="line">    except Exception as error:</span><br><span class="line">        print(str(error))</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>3.Make Request</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;bj.lianjia.com&#x2F;fangjia&#x2F;priceMap&#x2F;&quot;</span><br><span class="line">my_agent &#x3D; &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_3) Apple WebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.132; Ruoyu&#x2F;For study use&#39;</span><br><span class="line"></span><br><span class="line">housing_price &#x3D; get_page(url,my_agent)</span><br></pre></td></tr></table></figure>
<p>4.To_csv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; housing_price.json()</span><br><span class="line">df &#x3D; pd.DataFrame(data)</span><br><span class="line">df &#x3D; df.T.drop([&quot;longitude&quot;,&quot;latitude&quot;])</span><br><span class="line">df.to_csv(&#39;dataset&#x2F;housing_price_bj.csv&#39;, index&#x3D;None,encoding&#x3D;&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Tourism-Attractions-Beijing-Qunar-com"><a href="#Tourism-Attractions-Beijing-Qunar-com" class="headerlink" title="Tourism Attractions Beijing [Qunar.com]"></a>Tourism Attractions Beijing [Qunar.com]</h2><blockquote>
<p>Beijing tourism sight information scraping<br><a href="'https://piao.qunar.com/'">Qunaerwang</a><br>Start Date:20/3/2020;<br>Start url:<a href="https://piao.qunar.com/ticket/list.htm?keyword=%E5%8C%97%E4%BA%AC&amp;region=%E5%8C%97%E4%BA%AC&amp;from=mpshouye_hotcity&amp;sort=&amp;page=1" target="_blank" rel="noopener">https://piao.qunar.com/ticket/list.htm?keyword=%E5%8C%97%E4%BA%AC&amp;region=%E5%8C%97%E4%BA%AC&amp;from=mpshouye_hotcity&amp;sort=&amp;page=1</a><br>Ruoyu Wang</p>
</blockquote>
<p>接下来想去搞一下北京有什么好玩的？从小觉得去北京好像就是去看天安门故宫爬长城，其他好像也没什么了吧。<br>这次去去哪儿网上看看有什么热门景点，老样子用python爬一下网页。</p>
<p>1.Import Libs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup as bs</span><br><span class="line">import time</span><br><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure>

<p>2.Make Request</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_page(url,header) :</span><br><span class="line">    my_headers &#x3D; &#123;&quot;User-Agent&quot;: header&#125;</span><br><span class="line">    try:</span><br><span class="line">        page &#x3D; requests.get(url,headers &#x3D; my_headers) </span><br><span class="line">        return page</span><br><span class="line">    except Exception as error:</span><br><span class="line">        print(str(error))</span><br></pre></td></tr></table></figure>

<p>3.Scraping</p>
<p>热门景点居然有274页，爬了30分钟。<br>然而得到结果是大量重复的数据。shit！！！</p>
<p>-下次爬虫时，一定要注意测试有效页码，以免耽误时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my_agent &#x3D; &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_3) Apple WebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.132; Ruoyu&#x2F;For study use&#39;</span><br><span class="line"></span><br><span class="line">def get_list(my_agent):</span><br><span class="line">    # start page 1 </span><br><span class="line">    # valid pages : 15</span><br><span class="line">    page &#x3D; 1</span><br><span class="line">    sight_list &#x3D;[]</span><br><span class="line">    while page &lt; 15:</span><br><span class="line">        the_url &#x3D; &#39;https:&#x2F;&#x2F;piao.qunar.com&#x2F;ticket&#x2F;list.htm?keyword&#x3D;%E5%8C%97%E4%BA%AC&amp;region&#x3D;%E5%8C%97%E4%BA%AC&amp;from&#x3D;mpshouye_hotcity&amp;sort&#x3D;&amp;page&#x3D;&#123;&#125;&#39;</span><br><span class="line">        re &#x3D; get_page(the_url.format(page),my_agent) # call get_page function getting response</span><br><span class="line">        soup &#x3D; bs(re.content,&#39;html.parser&#39;)</span><br><span class="line">        print(&#39;Current working page:&#123;&#125;&#39;.format(str(page)))</span><br><span class="line">        page +&#x3D; 1</span><br><span class="line">        # Deal results with Beautiful Soup</span><br><span class="line">        sight_items &#x3D; soup.find_all(&#39;div&#39;, class_ &#x3D;&quot;sight_item&quot;)</span><br><span class="line">        # looping each tourism attraction</span><br><span class="line">        for i in sight_items:</span><br><span class="line">            sight_id &#x3D; i.attrs[&#39;data-id&#39;]</span><br><span class="line">            sight_name &#x3D; i.attrs[&#39;data-sight-name&#39;]</span><br><span class="line">            sight_address &#x3D; i.attrs[&#39;data-address&#39;]</span><br><span class="line">            sight_lalg &#x3D; i.attrs[&#39;data-point&#39;]</span><br><span class="line">            sight_lo,sight_la &#x3D; sight_lalg.split(&quot;,&quot;)</span><br><span class="line">            sight_area &#x3D; i.attrs[&#39;data-districts&#39;]</span><br><span class="line">            sight_des &#x3D; i.find(&#39;div&#39;,class_&#x3D;&#39;sight_item_info&#39;).find(&#39;div&#39;,class_&#x3D;&#39;intro&#39;).text</span><br><span class="line">            sight_hot &#x3D; i.find(&#39;div&#39;,class_&#x3D;&quot;sight_item_hot&quot;).find(&#39;em&#39;).text.replace(&quot;热度&quot;,&quot;&quot;).strip()</span><br><span class="line">            # if the popularity is 0, then remove it</span><br><span class="line">            if float(sight_hot) &#x3D;&#x3D; 0.0:</span><br><span class="line">                continue</span><br><span class="line">            # make a dictionary to store data</span><br><span class="line">            sight_dic &#x3D; &#123;&quot;id&quot;:sight_id,&quot;name&quot;:sight_name,&quot;address&quot;:sight_address,</span><br><span class="line">                       &quot;latitude&quot;:sight_la,&quot;longitude&quot;:sight_lo,&quot;area&quot;:sight_area,</span><br><span class="line">                       &quot;description&quot;:sight_des,&quot;popularity&quot;:sight_hot&#125;</span><br><span class="line">            sight_list.append(sight_dic)</span><br><span class="line">        # wait 5s for each page processing</span><br><span class="line">        time.sleep(5)</span><br><span class="line">    print(&quot;Mission completed, got &#123;&#125; pages data&quot;.format(page))</span><br><span class="line">    return sight_list</span><br></pre></td></tr></table></figure>

<p>4.To_csv</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def toCsv(data,name):</span><br><span class="line">    df &#x3D; pd.DataFrame.from_dict(data)</span><br><span class="line">    df.to_csv(&#39;&#123;&#125;.csv&#39;.format(name),index&#x3D;False,header&#x3D;True,encoding&#x3D;&quot;utf-8&quot;)</span><br><span class="line">    return df.sample(10)</span><br></pre></td></tr></table></figure>


<h2 id="Airbnb-Dataset-Download"><a href="#Airbnb-Dataset-Download" class="headerlink" title="Airbnb Dataset Download"></a>Airbnb Dataset Download</h2><blockquote>
<p>Airbnb Lists Beijing[21 January, 2020]<br><a href="'http://insideairbnb.com/get-the-data.html'">Airbnb</a><br>Start Date:21/1/2020;<br>Ruoyu Wang</p>
</blockquote>
<p>^ 天亮了，今天就写到这里吧！明天继续。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vis</tag>
        <tag>python</tag>
        <tag>d3</tag>
      </tags>
  </entry>
  <entry>
    <title>Class in JavaScript</title>
    <url>/2020/cket8yx1j000ialvg2rtlfajt/</url>
    <content><![CDATA[<h3 id="类的本质"><a href="#类的本质" class="headerlink" title="类的本质"></a>类的本质</h3><p>类的本质是函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> User); <span class="comment">//function</span></span><br></pre></td></tr></table></figure>

<p>在类中添加原型方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;;</span><br><span class="line">	getName()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>相当于:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类与构造函数差异"><a href="#类与构造函数差异" class="headerlink" title="类与构造函数差异"></a>类与构造函数差异</h3><ul>
<li>类定义的方法不能遍历</li>
</ul>
<h3 id="静态属性和方法只能通过类原型来调用"><a href="#静态属性和方法只能通过类原型来调用" class="headerlink" title="静态属性和方法只能通过类原型来调用"></a>静态属性和方法只能通过类原型来调用</h3><p>  使用静态方法批量生产对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">        <span class="string">"1990"</span>: <span class="number">794362.7682</span>,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"GB"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"United Kingdom"</span>,</span><br><span class="line">        <span class="string">"change"</span>: <span class="number">-10</span>,</span><br><span class="line">        <span class="string">"region"</span>: <span class="string">"EU"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"1990"</span>: <span class="number">71303.67987</span>,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">"SE"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Sweden"</span>,</span><br><span class="line">        <span class="string">"change"</span>: <span class="number">-20</span>,</span><br><span class="line">        <span class="string">"region"</span>: <span class="string">"EU"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">        <span class="keyword">this</span>.model = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> change() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.model.change;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> create(data) &#123;</span><br><span class="line">        <span class="comment">// data = JSON.parse(JSON.stringify(data));</span></span><br><span class="line">        <span class="keyword">return</span> data.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> EU(item));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> maxChange(data) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.abs(b.change) - <span class="built_in">Math</span>.abs(a.change)</span><br><span class="line">        &#125;)[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> totalEmission(data) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> acc[<span class="string">'1990'</span>] + cur[<span class="string">'1990'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> EUs = EU.create(data);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态属性和方法也是可以被继承的。</p>
</blockquote>
<h3 id="访问器"><a href="#访问器" class="headerlink" title="访问器"></a>访问器</h3><p><code>getter</code> 和 <code>setter</code> 可以用来管理属性，防止属性被随意修改</p>
<p>声明方法：方法前加<code>get</code> or <code>set</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">constructor</span>()&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">get</span> name()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> user1 = <span class="keyword">new</span> User(<span class="string">'ruoyu'</span>);</span><br><span class="line"><span class="comment">//使用访问器时不需要加括号</span></span><br><span class="line"><span class="built_in">console</span>.log(user1.name); <span class="comment">// 'ruoyu'</span></span><br></pre></td></tr></table></figure>

<h3 id="属性保护"><a href="#属性保护" class="headerlink" title="属性保护"></a>属性保护</h3><ol>
<li><p>可以通过<code>_&lt;name&gt;</code> 命名方式来告知此属性是私有属性，但此方式只是一种公认的提示，本身并不能防止属性的修改。</p>
</li>
<li><p>通过<code>symbol</code>来保护属性，比如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AGE = <span class="built_in">Symbol</span>(<span class="string">"age"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    _name = <span class="string">'ruoyu'</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(age) &#123;</span><br><span class="line">        <span class="keyword">this</span>[AGE] = age;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user1 = <span class="keyword">new</span> User(<span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user1) <span class="comment">// &#123;_name: "ruoyu", Symbol(age): 19&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>WeakMap()</code>键值对集</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _age = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    _age.set(<span class="keyword">this</span>, &#123;<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">password</span>:<span class="number">123</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> user1 = <span class="keyword">new</span> User(<span class="string">'ruoyu'</span>);</span><br><span class="line"><span class="comment">//属性并不会暴露在外部，除非使用get访问器</span></span><br><span class="line"><span class="built_in">console</span>.log(md) <span class="comment">// &#123;name:'ruoyu'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(_age) <span class="comment">//WeakMap &#123;User =&gt; &#123;age:18,pasword:123&#125;&#125;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h3><p>super 一直指向当前对象, 在继承关系中，如果想要使用父类中的属性方法，可以使用<code>super</code>关键字来指向当前对象。</p>
<p>下面通过普通方法来模拟<code>super</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">"user"</span>,</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> spawn = &#123;</span><br><span class="line">  __proto__: user,</span><br><span class="line">  name: <span class="string">"spawn"</span>,</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.__proto__.show.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(spwan.show()); <span class="comment">// 'spawn'</span></span><br></pre></td></tr></table></figure>

<p><code>super</code>关键词相当于一颗语法糖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上述代码中spwan中的show方法可以简写成：</span></span><br><span class="line">show()&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Note</strong>: <code>super</code>关键词只能在类或对象的方法中使用</p>
<p>在继承父类构造者中，可以使用<code>super()</code>方法来调用父类中的构造函数.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理剖析:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  Parent.apply(<span class="keyword">this</span>, args);</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS-solutions</title>
    <url>/2020/cket8yx1n000nalvg309vd25i/</url>
    <content><![CDATA[<h1 id="跨域方式实现原理"><a href="#跨域方式实现原理" class="headerlink" title="跨域方式实现原理"></a>跨域方式实现原理</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="一、What-is-CORS"><a href="#一、What-is-CORS" class="headerlink" title="一、What is CORS?"></a>一、What is CORS?</h2><p><strong>Cross-Origin Resource Sharing</strong> (<a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS" target="_blank" rel="noopener">CORS</a>) is a mechanism that uses additional <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP" target="_blank" rel="noopener">HTTP</a> headers to tell browsers to give a web application running at one <a href="https://developer.mozilla.org/en-US/docs/Glossary/origin" target="_blank" rel="noopener">origin</a>, access to selected resources from a different origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own.</p>
<h3 id="1-What-is-the-same-origin-security-policy"><a href="#1-What-is-the-same-origin-security-policy" class="headerlink" title="1.What is the same-origin security policy?"></a>1.What is the same-origin security policy?</h3><p>The same-origin policy is very restrictive. Under this policy, a document (i.e., like a web page) hosted on server A can only interact with other documents that are also on server A. In short, the same-origin policy enforces that documents that interact with each other have the same <em>origin</em>.</p>
<p>An origin is made up of the following three parts: the protocol, host, and port number.</p>
<p><strong><img src="/2020/cket8yx1n000nalvg309vd25i/same-origin.png" alt="same-origin"></strong></p>
<a id="more"></a>

<p><strong>同源策略限制内容有：</strong></p>
<ul>
<li>Cookie、LocalStorage、IndexedDB 等存储性内容</li>
<li>DOM 节点</li>
<li>AJAX 请求发送后，结果被浏览器拦截了</li>
</ul>
<p>但是有三个标签是允许跨域加载资源：</p>
<ul>
<li><code>&lt;img src=XXX&gt;</code></li>
<li><code>&lt;link href=XXX&gt;</code></li>
<li><code>&lt;script src=XXX&gt;</code></li>
</ul>
<h3 id="2-AN-EXAMPLE-OF-CROSS-ORIGIN-CIRCUMSTANCE"><a href="#2-AN-EXAMPLE-OF-CROSS-ORIGIN-CIRCUMSTANCE" class="headerlink" title="2.AN EXAMPLE OF CROSS ORIGIN CIRCUMSTANCE"></a>2.AN EXAMPLE OF CROSS ORIGIN CIRCUMSTANCE</h3><p><strong>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域</strong>。不同域之间相互请求资源，就算作“跨域”。</p>
<p><img src="/2020/cket8yx1n000nalvg309vd25i/cross-request.png" alt="cross-request"></p>
<h3 id="3-HOW-DOES-CORS-MANAGE-REQUESTS-FROM-EXTERNAL-RESOURCES"><a href="#3-HOW-DOES-CORS-MANAGE-REQUESTS-FROM-EXTERNAL-RESOURCES" class="headerlink" title="3.HOW DOES CORS MANAGE REQUESTS FROM EXTERNAL RESOURCES?"></a>3.HOW DOES CORS MANAGE REQUESTS FROM EXTERNAL RESOURCES?</h3><p>The CORS standard manages cross-origin requests by adding new HTTP headers to the standard list of headers. The <code>Access-Control-Allow-Origin</code> header allows servers to specify how their resources are shared with external domains. When a <code>GET</code> request is made to access a resource on Server A, Server A will respond with a value for the <code>Access-Control-Allow-Origin</code> header. Many times, this value will be <code>*</code>, meaning that Server A will share the requested resources with <em>any</em> domain on the Internet. Other times, the value of this header may be set to a particular domain (or list of domains), meaning that Server A will share its resources with that specific domain (or list of domains). The <code>Access-Control-Allow-Origin</code> header is critical to resource security.</p>
<p>特别说明两点：</p>
<p><strong>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</strong></p>
<p><strong>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”</strong>。</p>
<p>这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong></p>
<p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong>。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p>
<h2 id="二、跨域解决方案"><a href="#二、跨域解决方案" class="headerlink" title="二、跨域解决方案"></a>二、跨域解决方案</h2><h3 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1.JSONP"></a>1.JSONP</h3><h4 id="1-JSONP原理"><a href="#1-JSONP原理" class="headerlink" title="1) JSONP原理"></a>1) JSONP原理</h4><p><strong>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</strong></p>
<h4 id="2-JSONP和AJAX对比"><a href="#2-JSONP和AJAX对比" class="headerlink" title="2) JSONP和AJAX对比"></a>2) JSONP和AJAX对比</h4><p>JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p>
<h4 id="3-JSONP优缺点"><a href="#3-JSONP优缺点" class="headerlink" title="3) JSONP优缺点"></a>3) JSONP优缺点</h4><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<strong>缺点是仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</strong> 比如evil服务器端传入一个JavaScript的命令到我们的客户端上破坏我们的程序。</p>
<h4 id="4-JSONP的实现流程"><a href="#4-JSONP的实现流程" class="headerlink" title="4) JSONP的实现流程"></a>4) JSONP的实现流程</h4><ul>
<li>声明一个回调函数，其函数名(如display)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的data).</li>
<li>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src,还要在这个地址中向服务器传递该函数名(可以通过问号传参:?callback=show).</li>
<li>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是display，它准备好的数据是display(‘wangruoyu’)`.</li>
<li>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数(display)，对返回的数据进行操作.</li>
</ul>
<p>封装JSONP函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// name='ruoyu'&amp;callback=display</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">  script.onload(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.currentTarget.remove();</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[functionName];</span><br><span class="line">  &#125;)</span><br><span class="line">  script.onerror(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.currentTarge.remove();</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[functionName];</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:3000/student'</span>,</span><br><span class="line">  params: &#123; <span class="attr">name</span>: <span class="string">'ruoyu'</span> &#125;,</span><br><span class="line">  callback: <span class="string">'display'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>向 <code>http://localhost:3000/student?name=ruoyu&amp;callback=display</code>请求数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.get(<span class="string">'/stduent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; name, callback &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(name) <span class="comment">// ruoyu</span></span><br><span class="line">  <span class="built_in">console</span>.log(callback) <span class="comment">// display</span></span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;callback&#125;</span>('wangruoyu')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>



<h3 id="2-CORS"><a href="#2-CORS" class="headerlink" title="2.CORS"></a>2.CORS</h3><p><strong>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现</strong>。</p>
<p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p>
<p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符(*****)则表示所有网站都可以访问资源。</p>
<p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求</strong>和<strong>复杂请求</strong>。</p>
<h4 id="1-简单请求"><a href="#1-简单请求" class="headerlink" title="1) 简单请求"></a>1) 简单请求</h4><p>只要同时满足以下两大条件，就属于简单请求</p>
<p>条件1：使用下列方法之一：</p>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
</ul>
<p>条件2：Content-Type 的值仅限于下列三者之一：</p>
<ul>
<li>text/plain</li>
<li>multipart/form-data</li>
<li>application/x-www-form-urlencoded</li>
</ul>
<p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p>
<h4 id="2-复杂请求"><a href="#2-复杂请求" class="headerlink" title="2) 复杂请求"></a>2) 复杂请求</h4><p>不符合以上条件的请求就肯定是复杂请求了。 复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p>
<p>我们用<code>PUT</code>向后台请求时，属于复杂请求，后台需做如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 预检的存活时间</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">  res.end() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义后台返回的内容</span></span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'wagnruoyu'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=ruoyu'</span> <span class="comment">// cookie不能跨域</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'ruoyu'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">      <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br><span class="line"></span><br><span class="line"><span class="comment">//server1.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>] <span class="comment">//设置白名单</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'jw'</span>) <span class="comment">//返回一个响应头，后台需设置</span></span><br><span class="line">  res.end(<span class="string">'wangruoyu'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'wangruoyu'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure>

<p>上述代码由<code>http://localhost:3000/index.html</code>向<code>http://localhost:4000/</code>跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。</p>
<h3 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3.postMessage"></a>3.postMessage</h3><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>
<ul>
<li>页面和其打开的新窗口的数据传递</li>
<li>多窗口之间消息传递</li>
<li>页面与嵌套的iframe消息传递</li>
<li>上面三个场景的跨域数据传递</li>
</ul>
<p><strong>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递</strong>。</p>
<blockquote>
<p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p>
</blockquote>
<ul>
<li>message: 将要发送到其他 window的数据。</li>
<li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li>
<li>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li>
</ul>
<p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“name”,然后后者传回”wangruoyu”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">  &lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/等它加载完触发一个事件</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/内嵌在http:/</span><span class="regexp">/localhost:3000/</span>a.html</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span><br><span class="line">        frame.contentWindow.postMessage(<span class="string">'name'</span>, <span class="string">'http://localhost:4000'</span>) <span class="comment">//发送数据</span></span><br><span class="line">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//接受返回数据</span></span><br><span class="line">          <span class="built_in">console</span>.log(e.data) <span class="comment">//wangruoyu</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  	&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ b.html</span></span><br><span class="line"><span class="regexp">  window.onmessage = function(e) &#123;</span></span><br><span class="line"><span class="regexp">    console.log(e.data) /</span><span class="regexp">/wangruoyu</span></span><br><span class="line"><span class="regexp">    e.source.postMessage('wangruoyu', e.origin)</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-websocket"><a href="#4-websocket" class="headerlink" title="4.websocket"></a>4.websocket</h3><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据</strong>。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p>
<p>原生WebSocket API使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>
<p>我们先来看个例子：本地文件socket.html向<code>localhost:3000</code>发生数据和接受数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// socket.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      socket.send(<span class="string">'name'</span>);<span class="comment">//向服务器发送数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据 wangruoyu</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ server.js</span></span><br><span class="line"><span class="regexp">let express = require('express');</span></span><br><span class="line"><span class="regexp">let app = express();</span></span><br><span class="line"><span class="regexp">let WebSocket = require('ws');/</span><span class="regexp">/安装ws</span></span><br><span class="line"><span class="regexp">let wss = new WebSocket.Server(&#123;port:3000&#125;);</span></span><br><span class="line"><span class="regexp">wss.on('connection',function(ws) &#123;</span></span><br><span class="line"><span class="regexp">  ws.on('message', function (data) &#123;</span></span><br><span class="line"><span class="regexp">    console.log(data);</span></span><br><span class="line"><span class="regexp">    ws.send('wangruoyu')</span></span><br><span class="line"><span class="regexp">  &#125;);</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="5-Node中间件代理-两次跨域"><a href="#5-Node中间件代理-两次跨域" class="headerlink" title="5. Node中间件代理(两次跨域)"></a>5. Node中间件代理(两次跨域)</h3><p>实现原理：<strong>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。</strong> 代理服务器，需要做以下几个步骤：</p>
<ul>
<li>接受客户端请求 。</li>
<li>将请求 转发给服务器。</li>
<li>拿到服务器 响应 数据。</li>
<li>将 响应 转发给客户端。</li>
</ul>
<p>我们先来看个例子：本地文件index.html文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html(http://127.0.0.1:5500)</span></span><br><span class="line"> &lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">      $.ajax(&#123;</span></span><br><span class="line"><span class="regexp">        url: 'http:/</span><span class="regexp">/localhost:3000',</span></span><br><span class="line"><span class="regexp">        type: 'post',</span></span><br><span class="line"><span class="regexp">        data: &#123; name: 'xiamen', password: '123456' &#125;,</span></span><br><span class="line"><span class="regexp">        contentType: 'application/</span>json;charset=utf<span class="number">-8</span><span class="string">',</span></span><br><span class="line"><span class="string">        success: function(result) &#123;</span></span><br><span class="line"><span class="string">          console.log(result) // &#123;"title":"fontend","password":"123456"&#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        error: function(msg) &#123;</span></span><br><span class="line"><span class="string">          console.log(msg)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">     &lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// server1.js 代理服务器(http://localhost:3000)</span></span><br><span class="line"><span class="string">const http = require('</span>http<span class="string">')</span></span><br><span class="line"><span class="string">// 第一步：接受客户端请求</span></span><br><span class="line"><span class="string">const server = http.createServer((request, response) =&gt; &#123;</span></span><br><span class="line"><span class="string">  // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span></span><br><span class="line"><span class="string">  response.writeHead(200, &#123;</span></span><br><span class="line"><span class="string">    '</span>Access-Control-Allow-Origin<span class="string">': '</span>*<span class="string">',</span></span><br><span class="line"><span class="string">    '</span>Access-Control-Allow-Methods<span class="string">': '</span>*<span class="string">',</span></span><br><span class="line"><span class="string">    '</span>Access-Control-Allow-Headers<span class="string">': '</span>Content-Type<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">  // 第二步：将请求转发给服务器</span></span><br><span class="line"><span class="string">  const proxyRequest = http</span></span><br><span class="line"><span class="string">    .request(</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        host: '</span><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">',</span></span><br><span class="line"><span class="string">        port: 4000,</span></span><br><span class="line"><span class="string">        url: '</span>/<span class="string">',</span></span><br><span class="line"><span class="string">        method: request.method,</span></span><br><span class="line"><span class="string">        headers: request.headers</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      serverResponse =&gt; &#123;</span></span><br><span class="line"><span class="string">        // 第三步：收到服务器的响应</span></span><br><span class="line"><span class="string">        var body = '</span><span class="string">'</span></span><br><span class="line"><span class="string">        serverResponse.on('</span>data<span class="string">', chunk =&gt; &#123;</span></span><br><span class="line"><span class="string">          body += chunk</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">        serverResponse.on('</span>end<span class="string">', () =&gt; &#123;</span></span><br><span class="line"><span class="string">          console.log('</span>The data is <span class="string">' + body)</span></span><br><span class="line"><span class="string">          // 第四步：将响应结果转发给浏览器</span></span><br><span class="line"><span class="string">          response.end(body)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">    .end()</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">server.listen(3000, () =&gt; &#123;</span></span><br><span class="line"><span class="string">  console.log('</span>The proxyServer is running at http:<span class="comment">//localhost:3000')</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server2.js(http://localhost:4000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">title</span>: <span class="string">'fontend'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The server is running at http://localhost:4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出<code>{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p>
<h3 id="6-nginx反向代理"><a href="#6-nginx反向代理" class="headerlink" title="6.nginx反向代理"></a>6.nginx反向代理</h3><p>实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。</p>
<p>使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p>
<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>
<p>先下载<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx</a>，然后将nginx目录下的nginx.conf修改如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>       www www;  <span class="comment">## Default: nobody</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">5</span>;  <span class="comment">## Default: 1</span></span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log;</span><br><span class="line"><span class="attribute">pid</span>        logs/nginx.pid;</span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">8192</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">4096</span>;  <span class="comment">## Default: 1024</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span>    conf/mime.types;</span><br><span class="line">  <span class="attribute">include</span>    /etc/nginx/proxy.conf;</span><br><span class="line">  <span class="attribute">include</span>    /etc/nginx/fastcgi.conf;</span><br><span class="line">  <span class="attribute">index</span>    index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">  <span class="attribute">log_format</span>   main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>]  <span class="variable">$status</span> '</span></span><br><span class="line">    <span class="string">'"<span class="variable">$request</span>" <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">    <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line">  <span class="attribute">access_log</span>   logs/access.log  main;</span><br><span class="line">  <span class="attribute">sendfile</span>     <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">tcp_nopush</span>   <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>; <span class="comment"># this seems to be required for some vhosts</span></span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123; <span class="comment"># php/fastcgi</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  domain1.com www.domain1.com;</span><br><span class="line">    <span class="attribute">access_log</span>   logs/domain1.access.log  main;</span><br><span class="line">    <span class="attribute">root</span>         html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">      <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:1025</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123; <span class="comment"># simple reverse-proxy</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  domain2.com www.domain2.com;</span><br><span class="line">    <span class="attribute">access_log</span>   logs/domain2.access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># serve static files</span></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/(images|javascript|js|css|flash|media|static)/</span>  &#123;</span><br><span class="line">      <span class="attribute">root</span>    /var/www/virtual/big.server.com/htdocs;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass requests for dynamic content to rails/turbogears/zope, et al</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span>      http://127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">upstream</span> big_server_com &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.3:8000</span> weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.3:8001</span> weight=<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:8000</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.1:8001</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="section">server</span> &#123; <span class="comment"># simple load balancing</span></span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>     big.server.com;</span><br><span class="line">    <span class="attribute">access_log</span>      logs/big.server.access.log main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span>      http://big_server_com;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后通过命令行<code>nginx -s reload</code>启动nginx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-window-name-iframe"><a href="#7-window-name-iframe" class="headerlink" title="7.window.name + iframe"></a>7.window.name + iframe</h3><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>
<p>其中a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html(http://localhost:3000/b.html)</span><br><span class="line"> <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">let</span> first = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">   <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span></span><br><span class="line"><span class="actionscript">   <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">     if(first)&#123;</span><br><span class="line"><span class="actionscript">     <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="actionscript">       iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span></span><br><span class="line"><span class="actionscript">       first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">     &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">     <span class="comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(iframe.contentWindow.name);</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b.html为中间代理页，与a.html同域，内容为空。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// c.html(http://localhost:4000/c.html)</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.name = <span class="string">'wangruoyu'</span>  </span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>
<h3 id="8-location-hash-iframe"><a href="#8-location-hash-iframe" class="headerlink" title="8.location.hash + iframe"></a>8.location.hash + iframe</h3><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>
<p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。 同样的，a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//检测hash的变化</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line">   &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// b.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.parent.parent.location.hash = location.hash </span></span><br><span class="line"><span class="actionscript">   <span class="comment">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// c.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="actionscript"> iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-document-domain-iframe"><a href="#9-document-domain-iframe" class="headerlink" title="9.document.domain + iframe"></a>9.document.domain + iframe</h3><p><strong>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式</strong>。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p>
<p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p>
<p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中a的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> helloa</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://b.zf1.cn:3000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(frame.contentWindow.a);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// b.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   hellob</span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul>
<li>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li>
<li>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li>
<li>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。</li>
<li>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(一)</title>
    <url>/2020/cket8yx1t000qalvg7d7r3km4/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（一）"><a href="#CSS学习笔记（一）" class="headerlink" title="CSS学习笔记（一）"></a>CSS学习笔记（一）</h1><h2 id="CSS的导入"><a href="#CSS的导入" class="headerlink" title="CSS的导入"></a>CSS的导入</h2><ul>
<li>CSS文件三种的引入方式</li>
</ul>
<ol>
<li><code>&lt;link href=&#39;[filePaht]&#39;, rel=&#39;stylesheet&#39; type=&quot;text/css&quot;&gt;&lt;/link&gt;</code></li>
<li><code>&lt;div style=&quot;font-size:2rem&quot;&gt;ruoyu&lt;/div&gt;</code></li>
<li><code>&lt;head&gt; &lt;style&gt;div{font-size:2rem}&lt;style&gt; &lt;/head&gt;</code></li>
</ol>
<ul>
<li>在CSS文件中导入其他css样式：<code>@import url([filePath]) [all || screen || print] and (min-width:678px)</code></li>
</ul>
<a id="more"></a>

<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>“&gt;” 儿子选择器,选中所有儿子</p>
<p><code>p &gt; p {…}</code></p>
<p>‘+’ 只选紧贴着地后一个兄弟元素</p>
<p><code>p + p {…}</code></p>
<p>‘~’ 选中后面所有兄弟元素</p>
<p><code>p ~ p {...}</code></p>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><code>P[class=..] { …}</code></p>
<p>选中class名称中以ab开头的元素 <code>p[class^=’ab’] {…}</code></p>
<p>选中class名称中以ab结尾的元素 <code>p[class$=’ab’] {…}</code></p>
<p>选中含有ab的所有元素 <code>p[class*=’ab’] {…}</code></p>
<p>选中独立ab词的所有元素 <code>p[class~=’ab’] {…}</code></p>
<h3 id="伪类选择器Pseudo-CSS-selector"><a href="#伪类选择器Pseudo-CSS-selector" class="headerlink" title="伪类选择器Pseudo-CSS-selector"></a>伪类选择器Pseudo-CSS-selector</h3><p>选中所有子孙后代中的第一个元素 <code>p :first-child{ color: xxx}</code></p>
<p>选中儿子中的第一个元素 <code>p&gt;:first-child{ color: xxx}</code></p>
<p>选中第n个子元素 (even, odd)选中偶数奇数行 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 利用此特性可以来隔行变色*/</span></span><br><span class="line"><span class="comment">/* 'n' starts from zero*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-pseudo">:nth-child(2n)</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-pseudo">:nth-child(even)</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-pseudo">:nth-child(2n-1)</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-pseudo">:nth-child(odd)</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="All-CSS-Pseudo-Elements"><a href="#All-CSS-Pseudo-Elements" class="headerlink" title="All CSS Pseudo Elements"></a>All CSS Pseudo Elements</h4><table>
<thead>
<tr>
<th align="left">Selector</th>
<th align="left">Example</th>
<th align="left">Example description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_after.asp" target="_blank" rel="noopener">::after</a></td>
<td align="left">p::after</td>
<td align="left">Insert something after the content of each <p> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_before.asp" target="_blank" rel="noopener">::before</a></td>
<td align="left">p::before</td>
<td align="left">Insert something before the content of each <p> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_firstletter.asp" target="_blank" rel="noopener">::first-letter</a></td>
<td align="left">p::first-letter</td>
<td align="left">Selects the first letter of each <p> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_firstline.asp" target="_blank" rel="noopener">::first-line</a></td>
<td align="left">p::first-line</td>
<td align="left">Selects the first line of each <p> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_selection.asp" target="_blank" rel="noopener">::selection</a></td>
<td align="left">p::selection</td>
<td align="left">Selects the portion of an element that is selected by a user</td>
</tr>
</tbody></table>
<h4 id="All-CSS-Pseudo-Classes"><a href="#All-CSS-Pseudo-Classes" class="headerlink" title="All CSS Pseudo Classes"></a>All CSS Pseudo Classes</h4><table>
<thead>
<tr>
<th align="left">Selector</th>
<th align="left">Example</th>
<th align="left">Example description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_active.asp" target="_blank" rel="noopener">:active</a></td>
<td align="left">a:active</td>
<td align="left">Selects the active link</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_checked.asp" target="_blank" rel="noopener">:checked</a></td>
<td align="left">input:checked</td>
<td align="left">Selects every checked <input> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_disabled.asp" target="_blank" rel="noopener">:disabled</a></td>
<td align="left">input:disabled</td>
<td align="left">Selects every disabled <input> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_empty.asp" target="_blank" rel="noopener">:empty</a></td>
<td align="left">p:empty</td>
<td align="left">Selects every <p> element that has no children</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_enabled.asp" target="_blank" rel="noopener">:enabled</a></td>
<td align="left">input:enabled</td>
<td align="left">Selects every enabled <input> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_firstchild.asp" target="_blank" rel="noopener">:first-child</a></td>
<td align="left">p:first-child</td>
<td align="left">Selects every <p> elements that is the first child of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_first-of-type.asp" target="_blank" rel="noopener">:first-of-type</a></td>
<td align="left">p:first-of-type</td>
<td align="left">Selects every <p> element that is the first <p> element of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_focus.asp" target="_blank" rel="noopener">:focus</a></td>
<td align="left">input:focus</td>
<td align="left">Selects the <input> element that has focus</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_hover.asp" target="_blank" rel="noopener">:hover</a></td>
<td align="left">a:hover</td>
<td align="left">Selects links on mouse over</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_in-range.asp" target="_blank" rel="noopener">:in-range</a></td>
<td align="left">input:in-range</td>
<td align="left">Selects <input> elements with a value within a specified range</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_invalid.asp" target="_blank" rel="noopener">:invalid</a></td>
<td align="left">input:invalid</td>
<td align="left">Selects all <input> elements with an invalid value</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_lang.asp" target="_blank" rel="noopener">:lang(<em>language</em>)</a></td>
<td align="left">p:lang(it)</td>
<td align="left">Selects every <p> element with a lang attribute value starting with “it”</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_last-child.asp" target="_blank" rel="noopener">:last-child</a></td>
<td align="left">p:last-child</td>
<td align="left">Selects every <p> elements that is the last child of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_last-of-type.asp" target="_blank" rel="noopener">:last-of-type</a></td>
<td align="left">p:last-of-type</td>
<td align="left">Selects every <p> element that is the last <p> element of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_link.asp" target="_blank" rel="noopener">:link</a></td>
<td align="left">a:link</td>
<td align="left">Selects all unvisited links</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_not.asp" target="_blank" rel="noopener">:not(selector)</a></td>
<td align="left">:not(p)</td>
<td align="left">Selects every element that is not a <p> element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_nth-child.asp" target="_blank" rel="noopener">:nth-child(n)</a></td>
<td align="left">p:nth-child(2)</td>
<td align="left">Selects every <p> element that is the second child of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_nth-last-child.asp" target="_blank" rel="noopener">:nth-last-child(n)</a></td>
<td align="left">p:nth-last-child(2)</td>
<td align="left">Selects every <p> element that is the second child of its parent, counting from the last child</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_nth-last-of-type.asp" target="_blank" rel="noopener">:nth-last-of-type(n)</a></td>
<td align="left">p:nth-last-of-type(2)</td>
<td align="left">Selects every <p> element that is the second <p> element of its parent, counting from the last child</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_nth-of-type.asp" target="_blank" rel="noopener">:nth-of-type(n)</a></td>
<td align="left">p:nth-of-type(2)</td>
<td align="left">Selects every <p> element that is the second <p> element of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_only-of-type.asp" target="_blank" rel="noopener">:only-of-type</a></td>
<td align="left">p:only-of-type</td>
<td align="left">Selects every <p> element that is the only <p> element of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_only-child.asp" target="_blank" rel="noopener">:only-child</a></td>
<td align="left">p:only-child</td>
<td align="left">Selects every <p> element that is the only child of its parent</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_optional.asp" target="_blank" rel="noopener">:optional</a></td>
<td align="left">input:optional</td>
<td align="left">Selects <input> elements with no “required” attribute</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_out-of-range.asp" target="_blank" rel="noopener">:out-of-range</a></td>
<td align="left">input:out-of-range</td>
<td align="left">Selects <input> elements with a value outside a specified range</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_read-only.asp" target="_blank" rel="noopener">:read-only</a></td>
<td align="left">input:read-only</td>
<td align="left">Selects <input> elements with a “readonly” attribute specified</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_read-write.asp" target="_blank" rel="noopener">:read-write</a></td>
<td align="left">input:read-write</td>
<td align="left">Selects <input> elements with no “readonly” attribute</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_required.asp" target="_blank" rel="noopener">:required</a></td>
<td align="left">input:required</td>
<td align="left">Selects <input> elements with a “required” attribute specified</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_root.asp" target="_blank" rel="noopener">:root</a></td>
<td align="left">root</td>
<td align="left">Selects the document’s root element</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_target.asp" target="_blank" rel="noopener">:target</a></td>
<td align="left">#news:target</td>
<td align="left">Selects the current active #news element (clicked on a URL containing that anchor name)</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_valid.asp" target="_blank" rel="noopener">:valid</a></td>
<td align="left">input:valid</td>
<td align="left">Selects all <input> elements with a valid value</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3schools.com/cssref/sel_visited.asp" target="_blank" rel="noopener">:visited</a></td>
<td align="left">a:visited</td>
<td align="left">Selects all visited links</td>
</tr>
</tbody></table>
<h3 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h3><p><code>p: not( [css-selector] )</code> 例如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> <span class="selector-pseudo">:not(</span><span class="selector-pseudo">:nth-child(1))</span>&#123;</span></span><br><span class="line"><span class="xml">    /*选中<span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span>*/</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(二)</title>
    <url>/2020/cket8yx1u000talvge946h086/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（二）"><a href="#CSS学习笔记（二）" class="headerlink" title="CSS学习笔记（二）"></a>CSS学习笔记（二）</h1><h2 id="CSS文本"><a href="#CSS文本" class="headerlink" title="CSS文本"></a>CSS文本</h2><h3 id="em-和-rem"><a href="#em-和-rem" class="headerlink" title="em 和 rem"></a>em 和 rem</h3><blockquote>
<p><code>em</code> <em>is relative to the font-size of its direct or nearest parent,</em> <code>rem</code> *is only relative to the html (root) font-size.</p>
</blockquote>
<p>根据W3C的定义：</p>
<blockquote>
<p>Equal to the computed value of the <a href="https://www.w3.org/TR/css-fonts-3/#propdef-font-size" target="_blank" rel="noopener">font-size</a> property of the element on which it is used</p>
</blockquote>
<p>因此，<code>em</code>是相对于使用它的元素的字体大小, 如果该元素没有设置字体大小，那么就会向父级寻找</p>
<p><code>em</code>浏览器默认字体大小，16px( 火狐和Chrome )</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*如果该元素设置了字体大小，那么对应的em单位就会相对于该元素的字体大小*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>; </span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2em</span>; <span class="comment">/*32px*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了方便换算，我们通常在css中设置body的属性 <code>font-size:62.5%</code>，这就使<code>1em</code>值变为<code>10px</code></p>
<p>而<code>rem</code>是相对于根(html)元素的<code>font-size</code>计算的</p>
<blockquote>
<p>Equal to the computed value of <a href="https://www.w3.org/TR/css-fonts-3/#propdef-font-size" target="_blank" rel="noopener">font-size</a> on the root element.</p>
</blockquote>
<h3 id="font样式简写"><a href="#font样式简写" class="headerlink" title="font样式简写"></a>font样式简写</h3><p><code>font:bold italic 16px/1.4rem &#39;Merriweather&#39;, serif;</code></p>
<p>从左到右依次是<code>font-weight</code>, <code>font-style</code>, <code>font-size</code>, <code>line-height</code>,<code>font-family</code>。其中<code>font-weight</code>和<code>font-style</code>是可以参略的</p>
<h3 id="添加滑线和文字阴影"><a href="#添加滑线和文字阴影" class="headerlink" title="添加滑线和文字阴影"></a>添加滑线和文字阴影</h3><p>上滑线， 删除线， 下滑线</p>
<p><code>text-decoration:overline || line-through || underline</code> </p>
<p>阴影颜色， 右偏移量,  下偏移量，模糊度</p>
<p><code>text-shadow:red 4px 4px 4px</code></p>
<h3 id="空白和文本溢出"><a href="#空白和文本溢出" class="headerlink" title="空白和文本溢出"></a>空白和文本溢出</h3><p>保留多余空格和换行<code>p{white-space:pre;}</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*div内文本不换行溢出隐藏*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  </span><br><span class="line">	 <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">   <span class="attribute">overflow</span>:hidden;</span><br><span class="line">   <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本锁进和对齐"><a href="#文本锁进和对齐" class="headerlink" title="文本锁进和对齐"></a>文本锁进和对齐</h3><p>文本锁进 <code>text-indent:2rem</code> </p>
<p>文本对齐 <code>text-align:center</code></p>
<p>The <code>vertical-align</code>property can be used in two contexts:</p>
<ul>
<li>To vertically align an inline element’s box inside its containing line box. For example, it could be used to vertically position an <code>&lt;img&gt;</code> in a line of text</li>
<li>To vertically align the content of a cell in a table<img src="/2020/cket8yx1u000talvge946h086/vertical-align.png" alt="vertical-align"></li>
</ul>
<h3 id="冷门排版API"><a href="#冷门排版API" class="headerlink" title="冷门排版API"></a>冷门排版API</h3><p>单词间距<code>word-spacing</code></p>
<p>字母间距<code>letter-spacing</code></p>
<p>垂直从左到右排版 <code>writing-mode:vertical-lr</code></p>
<p>图片与文字垂直对齐 <a href="'https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align'"><code>vertical-align</code></a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(三)</title>
    <url>/2020/cket8yx1v000walvggvwqah2b/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（三）"><a href="#CSS学习笔记（三）" class="headerlink" title="CSS学习笔记（三）"></a>CSS学习笔记（三）</h1><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src="/2020/cket8yx1v000walvggvwqah2b/box-model.png" alt="box-model"></p>
<ul>
<li><p>外边距合并：如果两个盒子的外边距重叠，则只取最大那边的外边距值</p>
</li>
<li><p><code>box-sizing:border-box;</code>  传统意义上“width or height + padding + border = actual width or height”. 如果设置了<code>box-sizing:border-box;</code>属性，则”width or height = padding + border + content width or height”</p>
</li>
<li><p><code>border-radius:50%</code>绘制圆边框</p>
</li>
<li><p><code>outline:solid 2px #ddd</code> 轮廓线不会占用空间</p>
</li>
<li><p><code>width:fit-content</code> <code>width:max-content</code> <code>width:min-content</code>  根据根据内容来决定大小</p>
</li>
</ul>
<a id="more"></a>

<h2 id="定位布局"><a href="#定位布局" class="headerlink" title="定位布局"></a>定位布局</h2><h3 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 relative"></a>相对定位 <strong>relative</strong></h3><ul>
<li>相对与元素在文档流中原来位置的定位</li>
<li>并且不会脱离文档流，以此原来的位置还在。并使该元素提升一个层级，会覆盖下面元素</li>
<li>不会改变元素块级或行内属性</li>
</ul>
<h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位 absolute"></a>绝对定位 <strong>absolute</strong></h3><ul>
<li>会使元素脱离文档流，改变元素性质内变块</li>
<li>默认情况下，元素的绝对定位是参照浏览器窗口位置来定位</li>
<li>如果父级元素开启定位属性，该元素就会相对与该父级元素进行定位,如果没有会一直往上找</li>
<li>同样也会使元素提升一个层级，即具有覆盖属性</li>
</ul>
<h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 <strong>fixed</strong></h3><ul>
<li>永远相对于浏览器窗口进行定位</li>
</ul>
<h3 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位 sticky"></a>粘性定位 sticky</h3><ul>
<li><em>Sticky positioning is a hybrid of relative and fixed positioning.</em> </li>
<li>An element with <code>position: sticky;</code> is positioned based on the user’s scroll position.</li>
<li>粘性定位是参照父级元素来定位</li>
<li>通常stick在父级元素的顶部 <code>positon:sticky;top;0;</code></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(四)</title>
    <url>/2020/cket8yx1w000zalvg095599bi/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（四）"><a href="#CSS学习笔记（四）" class="headerlink" title="CSS学习笔记（四）"></a>CSS学习笔记（四）</h1><h2 id="Flex-弹性布局"><a href="#Flex-弹性布局" class="headerlink" title="Flex 弹性布局"></a>Flex 弹性布局</h2><h3 id="display-弹性盒子声明"><a href="#display-弹性盒子声明" class="headerlink" title="display 弹性盒子声明"></a>display 弹性盒子声明</h3><p>This defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* or inline-flex */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="内部排列方式-flex-direction"><a href="#内部排列方式-flex-direction" class="headerlink" title="内部排列方式 flex-direction"></a>内部排列方式 flex-direction</h3><p><img src="/2020/cket8yx1w000zalvg095599bi/flex-direction.png" alt="flex-direction"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Note</strong>: flex-direction默认为row</p>
</blockquote>
<a id="more"></a>

<h3 id="包裹方式-flex-wrap"><a href="#包裹方式-flex-wrap" class="headerlink" title="包裹方式 flex-wrap"></a>包裹方式 flex-wrap</h3><p><img src="/2020/cket8yx1w000zalvg095599bi/flex-wrap.png" alt="flex-wrap"></p>
<p>By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Note</strong>: 默认情况下，如果盒内元素溢出，则会尽可能的挤进一行</p>
</blockquote>
<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><blockquote>
<p>it is the shorthand for the <code>flex-direction</code> and <code>flex-wrap</code> properties</p>
</blockquote>
<ul>
<li><strong>Note</strong>: 默认值为<code>flex-flow:row nowrap;</code></li>
</ul>
<h3 id="主轴排列-justify-content"><a href="#主轴排列-justify-content" class="headerlink" title="主轴排列 justify-content"></a>主轴排列 justify-content</h3><p><img src="/2020/cket8yx1w000zalvg095599bi/justify-content.png" alt="justify-content"></p>
<ul>
<li><code>space-between</code>: items are evenly distributed in the line; first item is on the start line, last item on the end line</li>
<li><code>space-around</code>: items之间添加相等间隙，但是两个items之间的间隙不会重叠，因此排列在容器内边缘的间隙会比内部间隙小一倍</li>
<li><code>space-evenly</code>: 为内部items平局分配间隙，两个items之间的间隙会重叠</li>
</ul>
<h3 id="交叉轴的排列-align-items"><a href="#交叉轴的排列-align-items" class="headerlink" title="交叉轴的排列 align-items"></a>交叉轴的排列 align-items</h3><p><img src="/2020/cket8yx1w000zalvg095599bi/align-items.png" alt="align-items"></p>
<ul>
<li><code>stretch</code> (default): stretch to fill the container (still respect min-width/max-width)=&gt;item宽高属性优先级高于stretch</li>
<li><code>flex-start</code> / <code>start</code> / <code>self-start</code>: items are placed at the start of the cross axis. </li>
<li><code>flex-end</code> / <code>end</code> / <code>self-end</code>: items are placed at the end of the cross axis. </li>
<li><code>center</code>: items are centered in the cross-axis</li>
<li><code>baseline</code>: items are aligned such as their baselines align</li>
</ul>
<h3 id="多行交叉轴的排列-align-content"><a href="#多行交叉轴的排列-align-content" class="headerlink" title="多行交叉轴的排列 align-content"></a>多行交叉轴的排列 align-content</h3><p><img src="/2020/cket8yx1w000zalvg095599bi/align-content.png" alt="align-content"></p>
<ul>
<li><p><code>stretch</code> (default): lines stretch to take up the remaining space.</p>
<blockquote>
<p><strong>Note:</strong> this property has no effect when there is only one line of flex items.</p>
</blockquote>
</li>
</ul>
<h3 id="控制单个item-交叉轴"><a href="#控制单个item-交叉轴" class="headerlink" title="控制单个item 交叉轴"></a>控制单个item 交叉轴</h3><p><img src="/2020/cket8yx1w000zalvg095599bi/align-self.png" alt="align-self"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Note</strong>: <code>float,</code>  <code>clear</code>  and <code>vertical-align</code> have no effect on a flex item.</p>
</blockquote>
<h3 id="控制单个-item-的空间（对剩余空间的填充）"><a href="#控制单个-item-的空间（对剩余空间的填充）" class="headerlink" title="控制单个 item 的空间（对剩余空间的填充）"></a>控制单个 item 的空间（对剩余空间的填充）</h3><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p><img src="/2020/cket8yx1w000zalvg095599bi/flex-grow.png" alt="flex-grow"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="comment">/* default 0  Negative numbers are invalid.*/</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>If all items have <code>flex-grow</code> set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least). 即使该item设置了宽度</p>
</blockquote>
<p>与之相对的 <code>flex-shrink</code>是如果空间不够，将该item尽可能的缩放</p>
<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><blockquote>
<p>定义了该item对剩余空间分配前的尺寸. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. </p>
<p>The <code>auto</code> keyword means “look at my width or height property” </p>
<p><strong>Note:</strong> 优先级顺序max-width,min-width &gt; flex-basis &gt; width</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>:  | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><blockquote>
<p>This is the shorthand for <code>flex-grow,</code> <code>flex-shrink</code> and <code>flex-basis</code> combined. The second and third parameters (<code>flex-shrink</code> and <code>flex-basis</code>) are optional.</p>
<p>The default is <code>0 1 auto</code></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="控制单个-item-order"><a href="#控制单个-item-order" class="headerlink" title="控制单个 item order"></a>控制单个 item order</h3><p><code>.item{order:99} //default:0;</code> 从小到大顺序排列 </p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(五)</title>
    <url>/2020/cket8yx1x0012alvg4dq92uib/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（五）"><a href="#CSS学习笔记（五）" class="headerlink" title="CSS学习笔记（五）"></a>CSS学习笔记（五）</h1><h2 id="Grid-栅格系统"><a href="#Grid-栅格系统" class="headerlink" title="Grid 栅格系统"></a>Grid 栅格系统</h2><p><img src="/2020/cket8yx1x0012alvg4dq92uib/compatibility.png" alt="compatibility"></p>
<h3 id="grid声明"><a href="#grid声明" class="headerlink" title="grid声明"></a>grid声明</h3><ul>
<li><strong>grid</strong> – generates a block-level grid</li>
<li><strong>inline-grid</strong> – generates an inline-level grid</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid | inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="格子布局"><a href="#格子布局" class="headerlink" title="格子布局"></a>格子布局</h3><p><code>grid-template-columns</code> <code>grid-template-rows</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/cket8yx1x0012alvg4dq92uib/template-row&col.png" alt="template-row&amp;col"></p>
<p>利用<strong>repeat( [n], [size] )</strong>快速分配. 比如<code>grid-template-rows:repeat(4,25%)</code> [均等绘制4行] or <code>grid-template-rows:repeat(2, 100px, 50px)</code>[绘制4行分别为100px，50px，100px，50px 高]</p>
<h3 id="fr-unit"><a href="#fr-unit" class="headerlink" title="fr unit"></a>fr unit</h3><p><code>fr</code> : To set the size of a track as a fraction of the free space of the grid container and the free space is calculated <em>after</em> any non-flexible items.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">widht</span>:<span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr; <span class="comment">/*100px 50px 100px 100px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="minmax-unit-unit-控制格子最大最小值"><a href="#minmax-unit-unit-控制格子最大最小值" class="headerlink" title="minmax(unit,unit) 控制格子最大最小值"></a>minmax(unit,unit) 控制格子最大最小值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>:grid;</span><br><span class="line">  <span class="attribute">widht</span>:<span class="number">350px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>,minmax(<span class="number">50px</span>,<span class="number">100px</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gap-格间距"><a href="#gap-格间距" class="headerlink" title="gap 格间距"></a>gap 格间距</h3><p><code>row-gap:[unit]</code> <code>column-gap:[unit]</code> </p>
<p>Shorthand: <code>gap:&lt;row-gap&gt; &lt;column-gap&gt;</code></p>
<h3 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h3><p>通过引用使用grid-area属性指定的网格区域的名称来定义网格模板。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-c</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-d</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: </span><br><span class="line">    <span class="string">"header header header header"</span></span><br><span class="line">    <span class="string">"main main . sidebar"</span></span><br><span class="line">    <span class="string">"footer footer footer footer"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="控制行列对其方式-与Flex类似"><a href="#控制行列对其方式-与Flex类似" class="headerlink" title="控制行列对其方式 与Flex类似"></a>控制行列对其方式 与Flex类似</h3><p>控制单元格内部列对齐 <code>justify-items</code></p>
<p><code>.container {  justify-items: start | end | center | stretch; }</code></p>
<p>控制单元格内部行对齐 <code>align-items</code></p>
<p><code>.container {  align-items: start | end | center | stretch; }</code></p>
<ul>
<li>如果容器<code>container</code>的大小超过内部所有格子的大小，那么可以使用 <code>justify-content</code> 和 <code>align-content</code> 来控制在其容器总的对齐方式</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(六)</title>
    <url>/2020/cket8yx1x0014alvg3ge585hi/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（六）"><a href="#CSS学习笔记（六）" class="headerlink" title="CSS学习笔记（六）"></a>CSS学习笔记（六）</h1><h2 id="变形与透视"><a href="#变形与透视" class="headerlink" title="变形与透视"></a>变形与透视</h2><h3 id="translate-控制元素三纬运动"><a href="#translate-控制元素三纬运动" class="headerlink" title="translate 控制元素三纬运动"></a>translate 控制元素三纬运动</h3><ul>
<li>X axis</li>
</ul>
<p><code>transform:translateX(200px)</code></p>
<ul>
<li>Y axis</li>
</ul>
<p><code>transform:translateY(200px)</code></p>
<ul>
<li>XY shorthand</li>
</ul>
<p><code>transfrom:translate(200px,200px)</code></p>
<ul>
<li>Z axis has no relative unit 因此只能使用绝对单位</li>
</ul>
<p><code>transfrom:translateZ(200px)</code></p>
<ul>
<li>3D shorthand</li>
</ul>
<p><code>transfrom:translate3d(20%,0,100px)</code></p>
<h3 id="scale-控制缩放"><a href="#scale-控制缩放" class="headerlink" title="scale 控制缩放"></a>scale 控制缩放</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*example*/</span></span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div-nth-child</span>(1)&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">scaleX</span>(<span class="number">2</span>); <span class="comment">/*x轴尺寸放大原来的1倍*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div-nth-child</span>(2)&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">scaleY</span>(.<span class="number">5</span>);<span class="comment">/*y轴尺寸缩小原来的1倍*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">div-nth-child</span>(2)&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>, .<span class="number">5</span>); <span class="comment">/*Shorthand*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="transform-基点"><a href="#transform-基点" class="headerlink" title="transform 基点"></a>transform 基点</h3><p><code>transform-orign:left top //从左上角开始缩放</code></p>
<h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><p><code>transform:rotateX(45deg)</code> 向上翻转45度</p>
<p><code>transform:rotateY(45deg)</code>向右翻转45度</p>
<p><code>transform:rotateZ(45deg)</code> 平面旋转45度 或<code>transform:rotate(45deg)</code></p>
<h3 id="skew-倾斜"><a href="#skew-倾斜" class="headerlink" title="skew 倾斜"></a>skew 倾斜</h3><p><code>transform:skewX(45deg)</code></p>
<p><code>transform:skewY(45deg)</code></p>
<p><code>transform:skew(45deg,45deg)</code></p>
<a id="more"></a>

<h3 id="钟表绘制"><a href="#钟表绘制" class="headerlink" title="钟表绘制"></a>钟表绘制</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale="</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clock"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hour"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"minute"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">maring</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">justify-content</span>:center;</span><br><span class="line">  <span class="attribute">align-items</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clock</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">z-index</span>:-<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clock</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">z-index</span>:-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(3)</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(4)</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(5)</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">120deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(6)</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">150deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">z-index</span>:<span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.hour</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">15%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.minute</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>:bottom;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">60deg</span>);</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">35%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform-origin</span>:bottom;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transition</span>:<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.second</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="perspective-透视"><a href="#perspective-透视" class="headerlink" title="perspective 透视"></a>perspective 透视</h3><ul>
<li>观察单个元素</li>
</ul>
<p><code>transform:perspective(900px) rotateY(20deg)</code>;</p>
<ul>
<li>同时观察容器中所有元素</li>
</ul>
<p><code>perspective:900px;</code></p>
<ul>
<li>观察容器本身</li>
</ul>
<p><code>transfrom:perpective(900px) rotateY(45deg);</code></p>
<p>Eg: </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*同时观察容器中所有元素*/</span></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">	<span class="attribute">perspective</span>:<span class="number">900px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*观察单个元素*/</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">900px</span>) <span class="built_in">rotateY</span>(<span class="number">20deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*观察容器本身*/</span></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;<span class="comment">/*只要有三维空间参与，需要使用此方法*/</span></span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">900px</span>) <span class="built_in">rotateY</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">perspective</span>(<span class="number">900px</span>) <span class="built_in">translateZ</span>(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><p>翻转后，设置背面不可见</p>
<p><code>backface-visibilty:hidden;</code></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS-基础(七)</title>
    <url>/2020/cket8yx1y0018alvgf0a6e9gi/</url>
    <content><![CDATA[<h1 id="CSS学习笔记（七）"><a href="#CSS学习笔记（七）" class="headerlink" title="CSS学习笔记（七）"></a>CSS学习笔记（七）</h1><h2 id="CSS过渡-transition"><a href="#CSS过渡-transition" class="headerlink" title="CSS过渡 transition"></a>CSS过渡 transition</h2><p> 过渡属性</p>
<p><code>transition-property:[...property]</code></p>
<p>过渡时间</p>
<p><code>transition-duration:[...time]</code> </p>
<p>延迟触发</p>
<p><code>transition-delay:[...time]</code></p>
<p>过渡效果</p>
<p><code>transition-timing-function:[linear||ease-in||ease-out||ease-in-out]</code></p>
<p>过渡属性的缩写，其中transition-duration必填</p>
<p><code>transition:[property1] [transition-timing-function] transition-duration [transition-delay],</code> </p>
<a id="more"></a>

<h2 id="动画-Animation"><a href="#动画-Animation" class="headerlink" title="动画 Animation"></a>动画 Animation</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: stretch;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">1.5s</span>; </span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-out; </span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: none;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  is the same as:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: </span><br><span class="line">    stretch</span><br><span class="line">    <span class="number">1.5s</span></span><br><span class="line">    ease-out</span><br><span class="line">    <span class="number">0s</span></span><br><span class="line">    alternate</span><br><span class="line">    infinite</span><br><span class="line">    none</span><br><span class="line">    running;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*创建新的动画帧*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> ruoyu&#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">transfrom</span>:<span class="built_in">translateX</span>(<span class="number">200px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*使用百分比实现帧动画*/</span></span><br><span class="line"><span class="keyword">@keyframe</span> ruoyu&#123;</span><br><span class="line">  0%&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50%&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FF4136</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100%&#123;</span><br><span class="line">    <span class="attribute">transfrom</span>:<span class="built_in">translateX</span>(<span class="number">200px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性重叠时，后者优先级高于前者</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span>&#123;</span><br><span class="line">  <span class="comment">/*hello定义的相同动画属性会覆盖ruoyu*/</span> </span><br><span class="line">  <span class="attribute">animation-name</span>:ruoyu,hello;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframe</span> ruoyu&#123;<span class="selector-tag">to</span>&#123;<span class="attribute">transfrom</span>:<span class="built_in">translateX</span>(<span class="number">20px</span>)&#125;...&#125;</span><br><span class="line"><span class="keyword">@keyframe</span> hello&#123;<span class="selector-tag">to</span>&#123;<span class="attribute">transfrom</span>:<span class="built_in">translateX</span>(<span class="number">100px</span>)&#125;...&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>The number of times the animation is played. The value must be one of those available in <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-count" target="_blank" rel="noopener"><code>animation-iteration-count</code></a>.</p>
</li>
<li><p>The direction in which the animation is played. The value must be one of those available in <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-direction" target="_blank" rel="noopener"><code>animation-direction</code></a>.</p>
</li>
<li><p>Determines how styles should be applied to the animation’s target before and after its execution. The value must be one of those available in <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode" target="_blank" rel="noopener"><code>animation-fill-mode</code></a>.</p>
</li>
<li><p>Determines whether the animation is playing or not. The value must be one of those available in <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state" target="_blank" rel="noopener"><code>animation-play-state</code></a>.</p>
</li>
</ul>
<h2 id="媒体选择器"><a href="#媒体选择器" class="headerlink" title="媒体选择器"></a>媒体选择器</h2><p><code>@media screen and max-width(768px){...}</code></p>
<ul>
<li><p>逻辑或</p>
<p>应用于横屏或者尺寸大于768px</p>
</li>
</ul>
<p><code>@media screen and (orientation:landscape), and (min-width(768px)</code></p>
<ul>
<li><p>逻辑非</p>
<p>应用于不是横屏或者尺寸小于768px </p>
<p><code>@media not screen and (orientation:landscape), and (min-width(768px)</code> </p>
</li>
<li><p>逻辑only</p>
<p>用来忽略不兼容的低端浏览器</p>
<p><code>@media only screen and (min-width:600px)</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Form upload</title>
    <url>/2020/cket8yx1z001aalvgcemw5ilm/</url>
    <content><![CDATA[<h2 id="基础概要"><a href="#基础概要" class="headerlink" title="基础概要"></a>基础概要</h2><h3 id="同步上传多文件简单实现"><a href="#同步上传多文件简单实现" class="headerlink" title="同步上传多文件简单实现"></a>同步上传多文件简单实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'server/upload'</span> <span class="attr">method</span>=<span class="string">'post'</span> <span class="attr">enctype</span>=<span class="string">'multipart/form-data'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'file[]'</span> <span class="attr">mutiple</span>  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'submit'</span> <span class="attr">value</span>=<span class="string">'upload'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JS-提供的FormData构造函数及其方法"><a href="#JS-提供的FormData构造函数及其方法" class="headerlink" title="JS 提供的FormData构造函数及其方法"></a>JS 提供的FormData构造函数及其方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newForm = <span class="keyword">new</span> FormData();</span><br><span class="line">newForm.append(<span class="string">'Keyname'</span>,<span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line">newForm.get(<span class="string">'Keyname'</span>)  <span class="comment">// 'value'</span></span><br><span class="line">newForm.has(<span class="string">'Keyname'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">newForm.delete(<span class="string">'Keyname'</span>)</span><br><span class="line">newForm.get(<span class="string">'Keyname'</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure>



<h3 id="异步上传"><a href="#异步上传" class="headerlink" title="异步上传"></a>异步上传</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'file[]'</span> <span class="attr">mutiple</span> <span class="attr">id</span>=<span class="string">'file'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'submit'</span> <span class="attr">value</span>=<span class="string">'upload'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'progress-bar-wrapper'</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'progress-bar'</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error-info"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> fileNode = <span class="built_in">document</span>.querySelector(<span class="string">'#file'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> submitNode = <span class="built_in">document</span>.querySelector(<span class="string">'input[type="submit"]'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> progressBarWrapper = <span class="built_in">document</span>.querySelector(<span class="string">'.progress-bar-wrapper'</span>),</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">fileNode.addEventListener(<span class="string">'onchange'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// files属性可得到一组上传文件的信息，包括文件名称，文件大小（字节），文件类型等等</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> files = <span class="keyword">this</span>.files;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> fileName = <span class="string">''</span>,</span></span><br><span class="line">  		fileSize = 0,</span><br><span class="line">      maxSize = 1048576,</span><br><span class="line"><span class="actionscript">      errorInfo = <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">      formData = <span class="literal">null</span>;</span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;=files.length; i++)&#123;</span></span><br><span class="line">    fileName = files[i].name;</span><br><span class="line">    fileSize[i].size;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(!<span class="regexp">/\.(gif|jpg|jpeg|png)$/</span>.test(fileName))&#123;</span></span><br><span class="line"><span class="actionscript">      errorInfo = <span class="string">'类型错误'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    if(fileSize&gt;maxSize)&#123;</span><br><span class="line"><span class="actionscript">      errorInfo = <span class="string">'文件太大'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> progressBar = docuemtn.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">    progressBar.className = <span class="string">'progress-bar'</span>;</span></span><br><span class="line">    progressBarWrapper.appendChild(progressBar);</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(errorInfo !== <span class="string">''</span>)&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      progressBarWrapper.innerHTML = `<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"error-info"</span>&gt;</span>$&#123;errorInfo&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>`</span></span></span><br><span class="line"><span class="actionscript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      progressBar.innerHTML = '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span></span><br><span class="line">     	</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">      formData.append(<span class="string">'KeyName'</span>,files[i]);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// Ajax</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> ajax = <span class="built_in">window</span>.XMLHttpRequest? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() : <span class="keyword">new</span> ActionXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span></span><br><span class="line"><span class="actionscript">      ajax.open(<span class="string">'post'</span>,<span class="string">'server/upload'</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 利用闭包保存i</span></span></span><br><span class="line"><span class="actionscript">      (<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          ajax.upload.onprogress = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> e = e | <span class="built_in">window</span>.event,</span></span><br><span class="line"><span class="actionscript">              percent = e.loaded / e.total*<span class="number">100</span>+<span class="string">'%'</span>,</span></span><br><span class="line"><span class="actionscript">              thisProgressBar = getElementsByClassName(<span class="string">'progress-bar'</span>)[i];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          thisProgressBar.getElementsByClassName(<span class="string">'progress'</span>)[<span class="number">0</span>].style.width = perceant;</span></span><br><span class="line">      	&#125; </span><br><span class="line">      &#125;)(i)</span><br><span class="line">      ajax.send(formData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM &amp; Event in JavaScript</title>
    <url>/2020/cket8yx20001dalvggar1779j/</url>
    <content><![CDATA[<h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><h3 id="getElement…-与querySelector的区别"><a href="#getElement…-与querySelector的区别" class="headerlink" title="getElement… 与querySelector的区别"></a>getElement… 与querySelector的区别</h3><ul>
<li>使用getElement…返回的都是动态的集合</li>
<li>使用querySelectorAll返回的是静态集合</li>
</ul>
<h3 id="获取属性特征"><a href="#获取属性特征" class="headerlink" title="获取属性特征"></a>获取属性特征</h3><ul>
<li>使用特征操作时属性名称不区分大小写</li>
<li>特征值都为字符串类型，如需数值类型需要进行转换</li>
</ul>
<table>
<thead>
<tr>
<th>Method</th>
<th>Des</th>
</tr>
</thead>
<tbody><tr>
<td>getAttribute</td>
<td>获取属性</td>
</tr>
<tr>
<td>setAttribute</td>
<td>设置属性</td>
</tr>
<tr>
<td>removeAttribute</td>
<td>删除属性</td>
</tr>
<tr>
<td>hasAttribute</td>
<td>属性检测</td>
</tr>
</tbody></table>
<p>Note: 大部分情况下可以通过属性该更改并可同步到特征集中。但是像input中的value属性需要通过特征方法如<code>setAttribute</code>更改可同步到特征集中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">value</span>=<span class="string">"secret"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> login = <span class="built_in">document</span>.querySelector(<span class="string">`[name='login']`</span>)</span></span><br><span class="line"><span class="actionscript">login.value =  <span class="string">'12345'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(login.getAttribute(<span class="string">'value'</span>)) <span class="comment">// 'secret'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//---------------------------------------------------</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">login.setAttribute(<span class="string">'value'</span>, <span class="string">'12345'</span>)  </span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(login.value) <span class="comment">// '12345'</span></span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><p>为避免属性重名，JS提供了dataset接口，为属性添加data-前缀</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-color</span>=<span class="string">'red'</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> h1 = <span class="built_in">document</span>.querySelector(<span class="string">'h1'</span>);</span></span><br><span class="line"><span class="javascript">  	<span class="built_in">console</span>.log(h1.dataset.color) <span class="comment">// 'red'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>通过promise加载js/css文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">js</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> js = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    js.type = <span class="string">'text/javascript'</span></span><br><span class="line">    js.src = file</span><br><span class="line">    js.onload = resolve</span><br><span class="line">    js.onerror = reject</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(js)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> css = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>)</span><br><span class="line">    css.rel = <span class="string">'stylesheet'</span></span><br><span class="line">    css.href = file</span><br><span class="line">    css.onload = resolve</span><br><span class="line">    css.onerror = reject</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(css)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h4><p>使用createDocumentFragment可以创建虚拟的节点容器，不直接操作DOM性能更好</p>
<ul>
<li>创建的节点的parentNode为null</li>
<li>使用createDocumentFragment创建的节点来暂存文档节点</li>
<li>createDocumentFragment创建的节点添加到其他节点上时，会将子节点一并添加</li>
</ul>
<h4 id="cloneNode-amp-importNode"><a href="#cloneNode-amp-importNode" class="headerlink" title="cloneNode&amp;importNode"></a>cloneNode&amp;importNode</h4><p>使用cloneNode和document.importNode用于复制节点对象操作</p>
<p>cloneNode: 节点方法,参数为true时递归复制子节点即深拷贝.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span><br><span class="line"><span class="keyword">let</span> newContainer = container.cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>importNode: 对象方法. 第一个参数为节点对象，第二个为true是递归复制. (部分ie浏览器不支持)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span><br><span class="line"><span class="keyword">let</span> newContainer = <span class="built_in">document</span>.importNode(container,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h3 id="节点内容"><a href="#节点内容" class="headerlink" title="节点内容"></a>节点内容</h3><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>inneHTML用于向标签内添加html内容，同时触发浏览器的解析器重绘DOM。会保留原标签</p>
<h4 id="outerHTML"><a href="#outerHTML" class="headerlink" title="outerHTML"></a>outerHTML</h4><p>而outerHTML取代原来标签和内容反映到页面上，但在JS中还是保留原来的内容</p>
<h3 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h3><table>
<thead>
<tr>
<th>Method</th>
<th>Des</th>
</tr>
</thead>
<tbody><tr>
<td>append</td>
<td>节点尾部添加新节点或字符串</td>
</tr>
<tr>
<td>prepend</td>
<td>节点开始添加新节点或字符串</td>
</tr>
<tr>
<td>before</td>
<td>节点前面添加新节点或字符串</td>
</tr>
<tr>
<td>after</td>
<td>节点后面添加新节点或字符串</td>
</tr>
<tr>
<td>replaceWith</td>
<td>将节点替换为新节点或字符串</td>
</tr>
</tbody></table>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="表单查找"><a href="#表单查找" class="headerlink" title="表单查找"></a>表单查找</h4><ul>
<li>使用document.forms获取表单集合</li>
<li>使用form的name属性获取指定form元素</li>
<li>针对radio/checkbox获取的表单项是一个集合</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"secret"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">console</span>.log(<span class="built_in">document</span>.forms.login.title)</span></span><br><span class="line"><span class="handlebars"><span class="xml">  //  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="class的单独处理"><a href="#class的单独处理" class="headerlink" title="class的单独处理"></a>class的单独处理</h3><table>
<thead>
<tr>
<th>Method</th>
<th>Des</th>
</tr>
</thead>
<tbody><tr>
<td>node.classList.add</td>
<td>添加类名</td>
</tr>
<tr>
<td>node.classList.remove</td>
<td>删除类名</td>
</tr>
<tr>
<td>node.classList.toggle</td>
<td>切换类名（存删无添）</td>
</tr>
<tr>
<td>node.classList.contains</td>
<td>类名检测</td>
</tr>
</tbody></table>
<h3 id="widow-getComputedStyle"><a href="#widow-getComputedStyle" class="headerlink" title="widow.getComputedStyle"></a>widow.getComputedStyle</h3><p>使用window.getComputedStyle可获取所有应用在元素上的样式属性</p>
<ul>
<li>函数第一个参数为元素</li>
<li>第二个参数为伪类</li>
<li>这是计算后的样式属性，所以取得的单位和定义时的可能会有不同</li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>具体时间对象参考<a href="https://www.w3schools.com/jsref/dom_obj_event.asp" target="_blank" rel="noopener">https://www.w3schools.com/jsref/dom_obj_event.asp</a></p>
<p><strong>对象绑定</strong></p>
<p>如果事件处理程序可以是对象，对象的 handleEvent 方法会做为事件处理程序执行。下面将元素的事件统一交由对象处理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'h1'</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span></span><br><span class="line">    handleEvent(e) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>[e.type](e)</span></span><br><span class="line">    &#125;</span><br><span class="line">    click() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'click'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">    mouseover() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'mouseover'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  div.addEventListener(<span class="string">'click'</span>, <span class="keyword">new</span> Obj())</span></span><br><span class="line"><span class="actionscript">  div.addEventListener(<span class="string">'mouseover'</span>, <span class="keyword">new</span> Obj())</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>执行事件处理程序时，会产生当前事件相关信息的对象，即为事件对事。系统会自动做为参数传递给事件处理程序。</p>
</blockquote>
<p><code>event.currentTarget</code> 指代的是绑定事件的元素对象</p>
<p><code>event.target</code>指代的是事件响应的对象或者是其后代, 即得到事件目标元素即最底层的产生事件的对象</p>
<p>阻止默认事件行为可以使用<code>event.preventDefault()</code></p>
<h3 id="窗口事件"><a href="#窗口事件" class="headerlink" title="窗口事件"></a>窗口事件</h3><table>
<thead>
<tr>
<th>Event Type</th>
<th>Des</th>
</tr>
</thead>
<tbody><tr>
<td>window.onload</td>
<td>文档解析及外部资源加载后</td>
</tr>
<tr>
<td>DOMContentLoaded</td>
<td>文档解析后不需要外部资源加载，只能使用addEventListener设置</td>
</tr>
<tr>
<td>window.beforeunload</td>
<td>文档刷新或关闭时</td>
</tr>
<tr>
<td>window.unload</td>
<td>文档卸载时</td>
</tr>
<tr>
<td>scroll</td>
<td>页面滚动时</td>
</tr>
</tbody></table>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Funtion in JavaScript</title>
    <url>/2020/cket8yx21001falvg33wjgmgr/</url>
    <content><![CDATA[<h2 id="函数声明与优先级"><a href="#函数声明与优先级" class="headerlink" title="函数声明与优先级"></a>函数声明与优先级</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局标准声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局匿名函数</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> --num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局标准声明优先级高于赋值声明因此输出：2</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>)); <span class="comment">//2</span></span><br><span class="line"><span class="comment">//全局声明函数优先级会被提升，但是变量匿名函数优先级不会提升</span></span><br></pre></td></tr></table></figure>

<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>形参数量大于实参时，没有传参的形参值为 undefined</p>
<p>实参数量大于形参时，多于的实参将忽略并不会报错</p>
<p>在函数内部，arguments变量为所有参数的集合</p>
<p>当然也可以使用rest paramter把参数展开</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> restParam = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(args)<span class="comment">//为所有参数的集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用函数解析模版字符串"><a href="#使用函数解析模版字符串" class="headerlink" title="使用函数解析模版字符串"></a>使用函数解析模版字符串</h3><a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用函数来解析标签字符串，第一个参数是字符串值的数组，其余的参数为标签变量。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tepStr</span>(<span class="params">str, ...values</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">//["博客", ":", "", raw: Array(3)]</span></span><br><span class="line">    <span class="built_in">console</span>.log(values); <span class="comment">//["王小明", "www.wangruoyu.digital"]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'王小明'</span>,url = <span class="string">'www.wangruoyu.digital'</span>;</span><br><span class="line">tepStr <span class="string">`博客<span class="subst">$&#123;name&#125;</span>:<span class="subst">$&#123;url&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>

<h3 id="利用set：搜索记录实例"><a href="#利用set：搜索记录实例" class="headerlink" title="利用set：搜索记录实例"></a>利用set：搜索记录实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = <span class="keyword">new</span> <span class="built_in">Set</span>();   </span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">"ul"</span>);</span><br><span class="line">        ul.innerHTML = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">this</span>.data.forEach(<span class="function"><span class="params">word</span>=&gt;</span>&#123;</span><br><span class="line">            ul.innerHTML += <span class="string">`&lt;li&gt;<span class="subst">$&#123;word&#125;</span>&lt;/li&gt;`</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.keyword = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data.add(word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SearchList.prototype.keyword = function(word)&#123;</span></span><br><span class="line"><span class="comment">//         this.data.add(word);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="keyword">var</span> sl = <span class="keyword">new</span> SearchList();</span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'[name="ry"]'</span>);</span><br><span class="line">input.addEventListener(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    sl.keyword(<span class="keyword">this</span>.value);</span><br><span class="line">    sl.show(); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="this-指向问题"><a href="#this-指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用箭头函数this寻找父级作用域的对象.</span></span><br><span class="line"><span class="comment">//使用普通函数this指代当前作用域的对象.</span></span><br><span class="line"><span class="keyword">let</span> demo = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    getAgeByArrow: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这里this指代父级作用域也就是window</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//cannot read name</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//而这里指代当前调用它的对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// demo.getAge()</span></span><br></pre></td></tr></table></figure>

<h3 id="DOM事件中的this"><a href="#DOM事件中的this" class="headerlink" title="DOM事件中的this"></a>DOM事件中的this</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Dom = &#123;</span><br><span class="line">    name: <span class="string">"wangruoyu"</span>,</span><br><span class="line">    fakeHandler(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fake'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleEvent(event) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// addEventListener第二个参数若为函数，则这个函数可以传递一个event参数，event.target指代当前事件的对象.</span></span><br><span class="line">    <span class="comment">//自动找对象中的handleEvent方法</span></span><br><span class="line">    event() &#123;</span><br><span class="line">        <span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line">        btn.addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>);</span><br><span class="line">        btn.addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.fakeHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Dom.event()</span><br></pre></td></tr></table></figure>
<h2 id="利用-bind-apply-call-绑定对象"><a href="#利用-bind-apply-call-绑定对象" class="headerlink" title="利用 bind | apply | call 绑定对象"></a>利用 bind | apply | call 绑定对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用call方法改变this指向，下列实例中，通过call方法，给obj对象增加了一个值为“wangruoyu”的name属性.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">url</span>: <span class="string">"ry.com"</span> &#125;;</span><br><span class="line"><span class="comment">//通过继承构造函数User来创建新对象</span></span><br><span class="line">User.call(obj, <span class="string">"wangruoyu"</span>, <span class="string">"20"</span>)</span><br><span class="line"><span class="comment">// console.log(obj)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用call,apply方法会立即执行构造函数中的内容.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User_call</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(this,arg1,arg2);</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">url2</span>: <span class="string">"zz.com"</span> &#125;;</span><br><span class="line">User_call.call(obj2);</span><br><span class="line">User_call.apply(obj2);</span><br><span class="line"><span class="comment">// call与apply的区别是在于传递参数.</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt;call传递参数一个一个传，而apply为数组.比如：</span></span><br><span class="line">User_call.call(obj2, <span class="string">"arg1"</span>, <span class="string">"arg2"</span>);</span><br><span class="line">User_call.apply(obj2, [<span class="string">"arg1"</span>, <span class="string">"arg2"</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.clear()</span></span><br><span class="line"><span class="comment">// Math.max只能一个一个传递参数，下列使用展开语法和apply方法来获取数组中的最大值.</span></span><br><span class="line"><span class="comment">// let arr = [1,2,4,5,6];</span></span><br><span class="line"><span class="comment">// let aa = Math.max(...arr);</span></span><br><span class="line"><span class="comment">// let bb = Math.max.apply(Math,arr)</span></span><br><span class="line"><span class="comment">// console.log(aa,bb)</span></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"><span class="comment">// bind方法不会立刻执行，会得到一个新的函数。</span></span><br><span class="line"><span class="comment">// bind 是复制函数形为会返回新函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BindMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newA = BindMethod.bind(obj);</span><br><span class="line"><span class="comment">//使用bind方法将BindMethod中的this指向了obj这个对象</span></span><br><span class="line"><span class="comment">// console.log(newA())</span></span><br></pre></td></tr></table></figure>

<h3 id="利用bind实例"><a href="#利用bind实例" class="headerlink" title="利用bind实例"></a>利用bind实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Practice</span></span><br><span class="line"><span class="comment">//改变目标元素背景颜色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChangeColor</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ele = ele;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> colorSets = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;</span><br><span class="line">            colorSets.push(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">255</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> colorSets.join(<span class="string">","</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> color = <span class="string">`rgb(<span class="subst">$&#123;<span class="keyword">this</span>.color()&#125;</span>)`</span>;</span><br><span class="line">            <span class="keyword">this</span>.ele.style.backgroundColor = color;</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>), <span class="number">2000</span>) <span class="comment">//利用bind把对象绑定到setinterval作用域中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> body = <span class="keyword">new</span> ChangeColor(<span class="built_in">document</span>.body);</span><br><span class="line">body.run()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaSript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS-Closure</title>
    <url>/2020/cket8yx22001ialvg5fe0fav7/</url>
    <content><![CDATA[<h1 id="JS的作用域与闭包"><a href="#JS的作用域与闭包" class="headerlink" title="JS的作用域与闭包"></a>JS的作用域与闭包</h1><h2 id="What-is-closure"><a href="#What-is-closure" class="headerlink" title="What is closure?"></a>What is <code>closure</code>?</h2><p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>).</p>
<p>根据MDN的定义，闭包就是说内部函数可以访问外部函数的作用域。每一个Javascript函数在被创建时都会形成闭包。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Mozilla'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = makeFunc();</span><br><span class="line">myFunc();</span><br></pre></td></tr></table></figure>

<p>正如文档所说 <em>A closure is the combination of a function and the lexical environment within which that function was declared.</em> 因此当<code>makeFunc函数实例话给变量</code>myFunc<code>时，其内部的</code>displayName<code>保留了它的语法环境包括变量</code>name`.</p>
<a id="more"></a>

<h2 id="利用闭包使变量私有化"><a href="#利用闭包使变量私有化" class="headerlink" title="利用闭包使变量私有化"></a>利用闭包使变量私有化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> makeCounter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeBy</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    privateCounter += val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      changeBy(<span class="number">-1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> privateCounter;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter1 = makeCounter();</span><br><span class="line"><span class="keyword">var</span> counter2 = makeCounter();</span><br><span class="line"></span><br><span class="line">alert(counter1.value());  <span class="comment">// 0.</span></span><br><span class="line"></span><br><span class="line">counter1.increment();</span><br><span class="line">counter1.increment();</span><br><span class="line">alert(counter1.value()); <span class="comment">// 2.</span></span><br><span class="line"></span><br><span class="line">counter1.decrement();</span><br><span class="line">alert(counter1.value()); <span class="comment">// 1.</span></span><br><span class="line">alert(counter2.value()); <span class="comment">// 0.</span></span><br></pre></td></tr></table></figure>

<p>上述代码中，<code>makeCounter</code>语法环境被 <code>increment</code>, <code>decrement</code>和 <code>value</code>这三个函数共享，因此他们都能访问到父级作用域。</p>
<h2 id="Closure-Scope-Chain"><a href="#Closure-Scope-Chain" class="headerlink" title="Closure Scope Chain"></a>Closure Scope Chain</h2><p>Every closure has three scopes:</p>
<ul>
<li>Local Scope (Own scope)</li>
<li>Outer Functions Scope</li>
<li>Global Scope</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// global scope</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// outer functions scope</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// local scope</span></span><br><span class="line">        <span class="keyword">return</span> a + b + c + d + e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)); <span class="comment">// log 20</span></span><br></pre></td></tr></table></figure>



<h2 id="Var-Let-Const-作用域"><a href="#Var-Let-Const-作用域" class="headerlink" title="Var, Let , Const 作用域"></a>Var, Let , Const 作用域</h2><p>anonymous function 会形成闭包作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>; <span class="built_in">console</span>.log(num) <span class="comment">//1</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>let 和 const 形成块级作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letDeclare</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(num); <span class="comment">//1</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="在for-循环中需要注意的地方："><a href="#在for-循环中需要注意的地方：" class="headerlink" title="在for 循环中需要注意的地方："></a>在for 循环中需要注意的地方：</h3></blockquote>
<p>如下列代表，使用var声明变量<code>item</code>，在for循环中触发<code>onfocus</code>事件后执行dosomething所传入的参数<code>item.help</code>实际上总是最后一个<code>item</code>的值。换句话说，事件函数形成的闭包环境为最后一次循环后<code>item</code>的值. <strong>使用var声明时，通过for循环创建的三个闭包环境共享了<code>setupHelp</code>函数包含变量<code>item</code>的作用域</strong> .</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupHelp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> helpText = [</span><br><span class="line">      &#123;<span class="string">'id'</span>: <span class="string">'email'</span>, <span class="string">'help'</span>: <span class="string">'Your e-mail address'</span>&#125;,</span><br><span class="line">      &#123;<span class="string">'id'</span>: <span class="string">'name'</span>, <span class="string">'help'</span>: <span class="string">'Your full name'</span>&#125;,</span><br><span class="line">      &#123;<span class="string">'id'</span>: <span class="string">'age'</span>, <span class="string">'help'</span>: <span class="string">'Your age (you must be over 16)'</span>&#125;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; helpText.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = helpText[i];</span><br><span class="line">    <span class="built_in">document</span>.getElementById(item.id).onfocus = dosomething(item.help); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">setupHelp(); <span class="comment">// only show age help</span></span><br></pre></td></tr></table></figure>

<h3 id="利用闭包实例"><a href="#利用闭包实例" class="headerlink" title="利用闭包实例"></a>利用闭包实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> i &gt;= a &amp;&amp; i &lt;= b</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">	<span class="built_in">console</span>.log(data.filter(between(<span class="number">3</span>,<span class="number">6</span>)))</span><br></pre></td></tr></table></figure>

<p>如果变量left在click事件的回调函数中，那么每一次点击都会创建一个新的作用域，变量left就会又从1开始。</p>
<p>因此把变量left放在外部作用域中，每次点击就会只参考外部作用域中的left</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">let</span> bind = <span class="literal">false</span>;	</span><br><span class="line"><span class="keyword">let</span> left = <span class="number">1</span>;</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!bind)&#123;</span><br><span class="line">			bind = <span class="literal">true</span>;</span><br><span class="line">			<span class="comment">// setInterval return a mark number</span></span><br><span class="line">			<span class="keyword">var</span> id = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;		</span><br><span class="line">				btn.style.left = (left++) +<span class="string">'px'</span>;</span><br><span class="line">			&#125;,<span class="number">10</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Performance-considerations"><a href="#Performance-considerations" class="headerlink" title="Performance considerations"></a>Performance considerations</h2><p>It is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, as it will negatively affect script performance both in terms of processing speed and memory consumption.</p>
<p>闭包特性中上级作用域会为函数保存数据，从而造成内存泄漏问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">"div"</span>);</span><br><span class="line">divs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  item.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.getAttribute(<span class="string">"ry"</span>));<span class="comment">//item数据被保留</span></span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过清除不需要的数据解决内存泄漏问题</span></span><br><span class="line"><span class="keyword">let</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">"div"</span>);</span><br><span class="line">divs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ry = item.getAttribute(<span class="string">"ry"</span>); <span class="comment">// 只取需要的数据</span></span><br><span class="line">  item.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ry); <span class="comment">//只保留ry而不是整个item的数据</span></span><br><span class="line">  &#125;);</span><br><span class="line">  item = <span class="literal">null</span>; <span class="comment">//清除不需要的数据</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>when creating a new object/class, methods should normally be associated to the object’s prototype rather than defined into the object constructor, because whenever the constructor is called, the methods would get reassigned (that is, for every object creation).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name.toString();</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getName method 可以写入构造函数的原型中，这样避免再次构造时重新分配此方法浪费资源降低性能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name.toString();</span><br><span class="line">  MyObject.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul>
<li>全局环境变量不会被回收，能渗透到函数里（JS特性）</li>
<li>JS中的所有函数都是闭包</li>
<li>只要函数被使用，同作用域下的数据就会被保留【包括构造函数】</li>
<li>块级作用域（let，const）全局作用域（var)</li>
<li>使用var声明时，通过for循环创建的闭包环境共享了父级函数同一个作用域，而使用let和const时每一个闭包则访问独立的块级变量</li>
<li>避免不必要的嵌套函数闭包</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>lazyLoadAndDebounce</title>
    <url>/2020/cket8yx23001kalvg8jd1d1ry/</url>
    <content><![CDATA[<h2 id="如何实现图片懒加载？"><a href="#如何实现图片懒加载？" class="headerlink" title="如何实现图片懒加载？"></a>如何实现图片懒加载？</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol>
<li>存储图片地址，可利用DOM中自带的dataset属性</li>
<li>等用户可视窗口进入图片区域后，通过存储在dataset中的图片地址替换img的src属性</li>
<li>移除dataset中存储的地址</li>
</ol>
<h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, lazyLoad);</span><br><span class="line"><span class="keyword">const</span> images = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>);</span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> lazyLoad = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; images.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> img = images[i];</span><br><span class="line">    <span class="comment">// 当图片一半以上暴露在可视窗口，执行下列</span></span><br><span class="line">    <span class="keyword">const</span> showAt = <span class="built_in">window</span>.pageYOffset + <span class="built_in">window</span>.innerHeight - img.height / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> isAtHalf = showAt &gt; img.offsetTop;</span><br><span class="line">    <span class="keyword">if</span> (isAtHalf) &#123;</span><br><span class="line">      <span class="keyword">let</span> src = img.dataset.src;</span><br><span class="line">      img.setAttribute(<span class="string">'src'</span>, src);</span><br><span class="line">      img.removeAttribute(<span class="string">'data-src'</span>);</span><br><span class="line">      n++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong> 需要注意的是， 这里利用了变量<code>n</code>来判断图片是否加载完成，避免在滚动时重复执行造成<code>undefined</code>错误。 因为当任意图片再次执行此<code>for</code>循环时，第一次循环已经清除了<code>data-src</code>属性，因此会报<code>undefinded</code>错误。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>上述方法中，当用户滚动时，事件监听函数会频繁触发，因此可能会造成不必要的性能损耗，因此就需要防抖函数来限制其触发频率。</p>
<a id="more"></a>

<h3 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h3><h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><ol>
<li>初次触发时，立即执行回调函数</li>
<li>在事件第二次被触发n秒之后，再执行回调函数</li>
<li>如果在n秒内，事件再次被触发，重新计时</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,time=<span class="number">500</span>,immediate=true</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">// 首先清除定时器</span></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="keyword">var</span> cb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       	<span class="comment">// n秒之后把timer重新设为null</span></span><br><span class="line">      	timer = <span class="literal">null</span>;</span><br><span class="line">      	<span class="comment">// 第一次不立即执行逻辑</span></span><br><span class="line">      	<span class="keyword">if</span> (!triggerNow) fn.apply(_self, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (triggerNow &amp;&amp; !timer) &#123;</span><br><span class="line">      <span class="comment">// 只有timer为null时才进入此函数体</span></span><br><span class="line">      fn.apply(_self, args);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(cb, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><p>与防抖函数类似，节流函数在每n秒之内只执行一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,time=<span class="number">1000</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">      begin = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>;</span><br><span class="line">    		cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="keyword">if</span>(cur-begin &gt;= time)&#123;</span><br><span class="line">      fn.apply(_self,args);</span><br><span class="line">      begin = cur;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        fn.apply(_self,args);</span><br><span class="line">      &#125;,time)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ul>
<li>Ajax 请求数据提交</li>
<li>表单验证</li>
<li>监听滚动，鼠标悬浮事件等</li>
</ul>
<h2 id="如何实现图片预加载？"><a href="#如何实现图片预加载？" class="headerlink" title="如何实现图片预加载？"></a>如何实现图片预加载？</h2><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><ol>
<li>通过<code>Image</code>构造函数循环图片地址</li>
<li>给每一个实例化出来的图片对象添加<code>onload</code>事件</li>
<li>当触发<code>onload</code>事件时，把此图片添加到<code>DOM</code>节点上去</li>
</ol>
<h4 id="简单实现-1"><a href="#简单实现-1" class="headerlink" title="简单实现"></a>简单实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>);</span><br><span class="line"><span class="keyword">const</span> images = [<span class="string">'http://unsplash.it/200/200'</span>,<span class="string">'http://unsplash.it/300/300'</span>,<span class="string">'http://unsplash.it/400/400'</span>];</span><br><span class="line">images.forEach(<span class="function"><span class="params">image</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.src = image;</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    container.appendChild(img);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>同样可以使用<code>link</code>标签的<code>rel=&#39;preload&#39;</code>属性在页面被渲染之前就把图片加载完成，这种方法也适用于预加载js，css，大型媒体文件等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"1.png"</span> <span class="attr">as</span>=<span class="string">"image"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"main.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'1.png'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>lazyLoading</tag>
      </tags>
  </entry>
  <entry>
    <title>简单本地todo封装</title>
    <url>/2020/cket8yx24001nalvg35l1d0dg/</url>
    <content><![CDATA[<h2 id="利用localStorage封装todo逻辑"><a href="#利用localStorage封装todo逻辑" class="headerlink" title="利用localStorage封装todo逻辑"></a>利用localStorage封装todo逻辑</h2><p><strong>需要注意的是</strong>： </p>
<p>监听每个item是否被checked逻辑中，如果直接将监听事件绑定到每个item上，会导致新的item在被渲染后未能被成功添加此事件。 </p>
<p>当然也可以使用传统方法获取动态DOM节点如<code>getEelementById</code>,但是要通过[``mutationObserver`](<a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)不断的获取更新的DOM才能保证新的item也被添加上监听事件。" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)不断的获取更新的DOM才能保证新的item也被添加上监听事件。</a> </p>
<p>另一个方法是，可以将点击事件绑定到父元素上，通过<code>e.targe.matches</code>方法得到此item，然后通过获取存储在该item dataset中的索引来改变items对象中的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalToDo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(submitForm, itemsWrapper, selectAll, clearAll) &#123;</span><br><span class="line">    <span class="keyword">this</span>.submitForm = submitForm;</span><br><span class="line">    <span class="keyword">this</span>.itemsWrapper = itemsWrapper;</span><br><span class="line">    <span class="keyword">this</span>.selectAll = selectAll;</span><br><span class="line">    <span class="keyword">this</span>.clearAll = clearAll;</span><br><span class="line">    <span class="keyword">this</span>.items = <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'item'</span>)) || [];</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.render(<span class="keyword">this</span>.itemsWrapper, <span class="keyword">this</span>.items);</span><br><span class="line">    <span class="keyword">this</span>.submitForm.addEventListener(<span class="string">'submit'</span>, <span class="keyword">this</span>.addItem.bind(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">this</span>.itemsWrapper.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.toggleCheckbox.bind(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">this</span>.selectAll.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.toggleSelectAll.bind(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">this</span>.clearAll.addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.handleClear.bind(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  addItem(e) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">this</span>.submitForm.querySelector(<span class="string">'[name=item]'</span>).value;</span><br><span class="line">    <span class="keyword">this</span>.items.push(&#123; text, <span class="attr">checked</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="keyword">this</span>.render(<span class="keyword">this</span>.itemsWrapper, <span class="keyword">this</span>.items);</span><br><span class="line">    localStorage.setItem(<span class="string">'item'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.items));</span><br><span class="line">    <span class="keyword">this</span>.submitForm.reset();</span><br><span class="line">  &#125;</span><br><span class="line">  render(itemsWrapper, items = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.itemsWrapper.innerHTML = <span class="keyword">this</span>.items</span><br><span class="line">      .map(</span><br><span class="line">      (item, i) =&gt; <span class="string">`</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;input type=checkbox data-index=<span class="subst">$&#123;i&#125;</span> id=item<span class="subst">$&#123;i&#125;</span> <span class="subst">$&#123;item.checked ? <span class="string">'checked'</span> : <span class="string">''</span>&#125;</span> &gt;</span></span><br><span class="line"><span class="string">&lt;label for=item<span class="subst">$&#123;i&#125;</span>&gt;<span class="subst">$&#123;item.text&#125;</span>&lt;/label&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">    )</span><br><span class="line">      .join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  toggleCheckbox(e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!e.target.matches(<span class="string">'input'</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">const</span> index = e.target.dataset.index;</span><br><span class="line">    <span class="keyword">this</span>.items[index].checked = !<span class="keyword">this</span>.items[index].checked;</span><br><span class="line">    localStorage.setItem(<span class="string">'item'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.items));</span><br><span class="line">  &#125;</span><br><span class="line">  toggleSelectAll() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.selectAll.checked) &#123;</span><br><span class="line">      <span class="keyword">this</span>.items.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (item.checked = <span class="literal">true</span>));</span><br><span class="line">      localStorage.setItem(<span class="string">'item'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.items));</span><br><span class="line">      <span class="keyword">this</span>.render(<span class="keyword">this</span>.itemsWrapper, <span class="keyword">this</span>.items);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.items.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (item.checked = <span class="literal">false</span>));</span><br><span class="line">      localStorage.setItem(<span class="string">'item'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.items));</span><br><span class="line">      <span class="keyword">this</span>.render(<span class="keyword">this</span>.itemsWrapper, <span class="keyword">this</span>.items);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClear() &#123;</span><br><span class="line">    localStorage.removeItem(<span class="string">'item'</span>);</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">    <span class="keyword">this</span>.render(itemsList);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addItems = <span class="built_in">document</span>.querySelector(<span class="string">'.add-items'</span>);</span><br><span class="line"><span class="keyword">const</span> itemsList = <span class="built_in">document</span>.querySelector(<span class="string">'.plates'</span>);</span><br><span class="line"><span class="keyword">const</span> selectAll = <span class="built_in">document</span>.querySelector(<span class="string">'#select-all'</span>);</span><br><span class="line"><span class="keyword">const</span> clearAll = <span class="built_in">document</span>.querySelector(<span class="string">'#clear-all'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> LocalToDo(addItems, itemsList, selectAll, clearAll).init();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Next.js For SSR</title>
    <url>/2020/cket8yx25001qalvg0f5hcdui/</url>
    <content><![CDATA[<h2 id="next-js-与-SSR"><a href="#next-js-与-SSR" class="headerlink" title="next.js 与 SSR"></a>next.js 与 SSR</h2><p>术语:</p>
<ul>
<li><p>服务器端渲染（SSR）：响应每个请求，在服务器上渲染应用程序，然后将水合的HTML和Javascript发送回客户端。</p>
</li>
<li><p>静态渲染（SR）：在构建时（例如，当您运行npm run build命令时）渲染应用。通常涉及为每个URL生成一个静态HTML页面。这是NextJS的默认方法。</p>
</li>
<li><p>客户端渲染（CSR）：在运行时在浏览器中的客户端上渲染应用程序。</p>
</li>
</ul>
<p>利弊:<br>  即使Next的建议是使用静态渲染，每种方法都有其优点和缺点。</p>
<ul>
<li><p>服务器端渲染（SSR）：<br>优点:</p>
<ul>
<li>可以动态处理动态路线</li>
<li>渲染页面将始终是最新的</li>
</ul>
<p>缺点:</p>
<ul>
<li>如果要进行繁重的处理可能会很慢，因为客户端在发出请求后必须等待每个页面</li>
<li>CDN无法缓存</li>
</ul>
</li>
<li><p>静态渲染（SR）：<br>优点:</p>
<ul>
<li>始终非常快速和高效</li>
</ul>
<p>缺点:</p>
<ul>
<li>如果您不知道所有URL早于（构建）时间，则无法处理动态路由</li>
</ul>
</li>
<li><p>客户端渲染（CSR）：<br>缺点:</p>
<ul>
<li>随着应用程序的增长迅速降低速度，通常应避免使用</li>
</ul>
</li>
</ul>
<p>NextJS中的SSR，SR和CSR:</p>
<blockquote>
<p>getStaticProps —在构建时获取数据<br>getStaticPaths —在构建时预渲染动态路由<br>getServerSideProps —在每个请求上获取数据<br>swr-在运行时从客户端获取数据</p>
<p>基本上，Next.JS将在构建时呈现尽可能多的HTML数据（getStaticProps），然后如果以后需要数据，它将运行getServerSideProps。如果需要在客户端上获取数据，使用swr。</p>
</blockquote>
<h3 id="getStaticProps"><a href="#getStaticProps" class="headerlink" title="getStaticProps"></a>getStaticProps</h3><p>Next.JS在构建时预先渲染每个页面，并使用 <code>getStaticProps</code> 返回的道具将数据与页面混合。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="keyword">export</span> <span class="keyword">const</span> getStaticProps = <span class="keyword">async</span> () =&gt; </span><br><span class="line">  (&#123; <span class="attr">props</span>: &#123; <span class="attr">data</span>: <span class="string">"Some Data"</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="TypeScript-Implementation"><a href="#TypeScript-Implementation" class="headerlink" title="TypeScript Implementation"></a>TypeScript Implementation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; GetStaticProps &#125; <span class="keyword">from</span> <span class="string">'next'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStaticProps: GetStaticProps = <span class="keyword">async</span> () =&gt; </span><br><span class="line">  (&#123; <span class="attr">props</span>: &#123; <span class="attr">data</span>: <span class="string">"Some Data"</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>

<p>关于<code>getStaticProps</code>的一些重要注意事项：</p>
<p>1.由于它在构建时执行，因此它不会从运行时发出的任何请求接收数据。 其中包括查询参数，HTTP标头等<br>2.它“仅”运行在“服务器”上，这意味着您可以在此处编写服务器代码，而不会下载到该代码或在“客户端”上运行，例如 API调用，数据库调用，请求等<br>3.由于它仅在<strong>服务器</strong>上运行，因此您无需进行本地API调用（例如<code>/ pages / api</code>）。 只需直接在<code>getStaticProps</code>内部编写服务器代码即可。</p>
<h3 id="getStaticPaths"><a href="#getStaticPaths" class="headerlink" title="getStaticPaths"></a>getStaticPaths</h3><p>因此，<code>getStaticPaths</code>允许您列出以后希望****需要的动态路由列表，然后在构建时将其渲染（例如，当您运行<code>npm run时） 在您的终端窗口中构建</code>）。 您可以通过返回带有`paths’键（必需）的对象来定义它们。</p>
<p>这就引出了一个问题：“如果** User **请求您未在<code>getStaticPaths</code>中定义的页面会发生什么？”。 返回的对象还具有一个称为“ fallback”的键（必需），该键指示此行为。</p>
<p>如果将“ fallback”关键字设置为“ false”，则所有未定义的路由“ 404”都会退出。</p>
<p>如果将fallback键设置为true，则当<strong>User</strong>请求未定义页面时，NextJS会抛出在同一文件中定义的fallback HTML，则在后台进行下一步，并使用用户输入的URL完全生成了所请求的页面，然后将其交换为后备HTML。详情参考 <a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation" target="_blank" rel="noopener">docs</a> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Post = <span class="function">(<span class="params">&#123; post &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (router.isFallback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;&#123;...post&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export async function getStaticPaths() &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;</span></span><br><span class="line"><span class="regexp">    paths: [&#123; params: &#123; id: '1' &#125; &#125;, &#123; params: &#123; id: '2' &#125; &#125;],</span></span><br><span class="line"><span class="regexp">    fallback: true,</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export async function getStaticProps(&#123; params &#125;) &#123;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ if url was /</span>posts/<span class="number">3</span>, params.id will be <span class="number">3</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`https://.../<span class="subst">$&#123;params.id&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">const</span> post = <span class="keyword">await</span> res.json()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; post &#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Post</span><br></pre></td></tr></table></figure>



<h3 id="TypeScript-Implementation-1"><a href="#TypeScript-Implementation-1" class="headerlink" title="TypeScript Implementation"></a>TypeScript Implementation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; GetStaticPaths &#125; <span class="keyword">from</span> <span class="string">'next'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStaticPaths: GetStaticPaths = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="getServerSideProps"><a href="#getServerSideProps" class="headerlink" title="getServerSideProps"></a>getServerSideProps</h3><p>NextJS将在每次请求时使用<code>getServerSideProps</code>函数呈现页面**，并将使用该函数返回的数据填充组件props。</p>
<p>根据文档，如果您在构建时无法访问页面所需的数据，则仅应使用<code>getServerSideProps</code>。 即请求中包含一些您需要的信息，以提取所需的数据或呈现页面。</p>
<p>注意，<code>getServerSideProps</code>仅在** Server <strong>上运行，并且永远不会下载到</strong> Client <strong>或在</strong> Client **中运行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Page = <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;<span class="keyword">export</span> <span class="keyword">const</span> getServerSideProps = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">`https://.../data`</span>);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();  <span class="keyword">return</span> &#123; <span class="attr">props</span>: &#123; data &#125; &#125;;</span><br><span class="line">&#125;<span class="keyword">export</span> <span class="keyword">default</span> Page;</span><br></pre></td></tr></table></figure>



<h3 id="TypeScript-Implementation-2"><a href="#TypeScript-Implementation-2" class="headerlink" title="TypeScript Implementation"></a>TypeScript Implementation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; GetServerSideProps &#125; <span class="keyword">from</span> <span class="string">'next'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getServerSideProps: GetServerSideProps = <span class="keyword">async</span> () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="The-SWR-Hook"><a href="#The-SWR-Hook" class="headerlink" title="The SWR Hook"></a>The SWR Hook</h3><p>Next.JS通常对客户端渲染不满意，但这并不意味着您无法在运行时从客户端获取数据。</p>
<p>Next的聪明人创建了一个名为[SWR]（<a href="https://swr.vercel.app/）的钩子，该钩子表示**Stale" target="_blank" rel="noopener">https://swr.vercel.app/）的钩子，该钩子表示**Stale</a> While Revalidate** —反过来又是HTTP缓存失效策略的名称。</p>
<p>我们将在另一篇文章中深入探讨SWR，但与此同时，这里有一个简短的代码片段来演示其用法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSWR <span class="keyword">from</span> <span class="string">'swr'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Article = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data, error &#125; = useSWR(<span class="string">'/api/prices'</span>, fetch)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>There was an error!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Still loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Prices: &#123;data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>主要的收获是：尽可能使用<strong>静态渲染</strong>。 如果您需要信息来渲染仅在用户发出请求时才可用的页面，请使用“服务器端渲染”。 如果您需要实时更新客户端，强烈建议使用SWR。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>next.js</tag>
        <tag>react.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise in JavaScript</title>
    <url>/2020/cket8yx26001ualvg7hmzblfw/</url>
    <content><![CDATA[<h2 id="What-is-a-Promise"><a href="#What-is-a-Promise" class="headerlink" title="What is a Promise?"></a>What is a Promise?</h2><blockquote>
<p><strong>MDN</strong></p>
<p>A <code>Promise</code> is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action’s eventual success value or failure reason.</p>
</blockquote>
<p>A <code>Promise</code> is in one of these states:</p>
<ul>
<li><p><em>pending</em>: initial state, neither fulfilled nor rejected.</p>
</li>
<li><p><em>fulfilled</em>: meaning that the operation completed successfully.</p>
</li>
<li><p><em>rejected</em>: meaning that the operation failed</p>
</li>
</ul>
<h2 id="Promise-chain"><a href="#Promise-chain" class="headerlink" title="Promise chain"></a>Promise chain</h2><p>A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise’s then method are called</p>
<p>  <img src="/2020/cket8yx26001ualvg7hmzblfw/promise-chain.png" alt="promise-chain"></p>
<blockquote>
<p>The methods <code>promise.then(),</code> <code>promise.catch(), and promise.finally()</code> are used to associate further action with a promise that becomes settled.</p>
</blockquote>
<p>  链式加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    script.src = file;</span><br><span class="line">    script.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(script);</span><br><span class="line">    script.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject();</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">load(<span class="string">"js/1.js"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> load(<span class="string">"js/2.js"</span>))</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">here</span>&gt;</span>);</span></span><br></pre></td></tr></table></figure>

<p>使用promise封装定时器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装定时器</span></span><br><span class="line"><span class="comment">//定时器为宏任务队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeOut</span>(<span class="params">delay=<span class="number">3000</span>,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>callback(resolve),delay)</span><br><span class="line">        <span class="comment">//delay to trigger Promise return resolve to callback</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> timeInterval = <span class="function">(<span class="params">callback, delay = <span class="number">60</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> callback(id), delay)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">timeInterval(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line">  <span class="keyword">let</span> left = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(div).left)</span><br><span class="line">  div.style.left = left + <span class="number">10</span> + <span class="string">'px'</span>;</span><br><span class="line">  <span class="keyword">if</span> (left &gt; <span class="number">250</span>) &#123;</span><br><span class="line">    clearInterval(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="利用promise实现缓存加载"><a href="#利用promise实现缓存加载" class="headerlink" title="利用promise实现缓存加载"></a>利用promise实现缓存加载</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//缓存后台数据，避免重复请求数据</span></span><br><span class="line"><span class="comment">//函数实际上也是对象，可以给这个函数对象添加cache属性,从而存储请求得到的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> cache = query.cache || (query.cache=<span class="keyword">new</span> <span class="built_in">Map</span>());</span><br><span class="line">    <span class="keyword">if</span> (cache.has(name))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'走了缓存'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(cache.get(name))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        resolve(&#123;[name]:<span class="string">"ruoyu"</span>&#125;)&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">        cache.set(name,value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没走缓存'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">query(<span class="string">"请求名"</span>).then(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">console</span>.log(value))</span><br><span class="line"></span><br><span class="line">setTimeout(</span><br><span class="line">    ()=&gt;query(<span class="string">"请求名"</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">console</span>.log(value))</span><br><span class="line">    ,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Static-method"><a href="#Static-method" class="headerlink" title="Static method"></a>Static method</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener"><code>Promise.all(iterable)</code></a></p>
<p>Wait for all promises to be resolved, or for any to be rejected.</p>
<p>If the returned promise resolves, it is resolved with an aggregating array of the values from the resolved promises ,in the same order as defined in the iterable of multiple promises.</p>
<p>If it rejects, it is rejected with the reason from the first promise in the iterable that was rejected.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled" target="_blank" rel="noopener"><code>Promise.allSettled(iterable)</code></a></p>
<p>Wait until all promises have settled (each may resolve or reject).</p>
<p>Returns a promise that resolves after all of the given promises have either resolved or rejected, with an array of objects that each describe the outcome of each promise.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener"><code>Promise.race(iterable)</code></a></p>
<p>Wait until any of the promises is resolved or rejected.</p>
<p>If the returned promise resolves, it is resolved with the value of the first promise in the iterable that resolved.</p>
<p>If it rejects, it is rejected with the reason from the first promise that was rejected.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject" target="_blank" rel="noopener"><code>Promise.reject(reason)</code></a></p>
<p>Returns a new <code>Promise</code> object that is rejected with the given reason.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener"><code>Promise.resolve(value)</code></a></p>
<p>Returns a new <code>Promise</code> object that is resolved with the given value. If the value is a thenable (i.e. has a <code>then</code> method), the returned promise will “follow” that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.</p>
<h3 id="实现promise队列"><a href="#实现promise队列" class="headerlink" title="实现promise队列"></a>实现promise队列</h3><p>基本思路：通过上一次返回的promise来依次执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">  value += <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">//2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      resolve(value+<span class="number">1</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">//3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//先打印1，然后隔一秒之后再打印3</span></span><br></pre></td></tr></table></figure>

<p>通过map方法实现promise队列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queue</span> = (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  arr.map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    promise = promise.then(<span class="function"><span class="params">_</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(item);</span><br><span class="line">          resolve(item);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">queue([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="comment">//每隔一秒输出数组中的值</span></span><br></pre></td></tr></table></figure>

<p>通过reduce方法实现promise队列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sentQuery</span>(<span class="params">items</span>)</span>&#123;</span><br><span class="line">    items.reduce(<span class="function">(<span class="params">promise,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> promise.then(<span class="function"><span class="params">_</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(item)</span><br><span class="line">                    resolve(item)</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,<span class="built_in">Promise</span>.resolve())</span><br><span class="line">&#125;</span><br><span class="line">sentQuery([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure>

<h3 id="封装可利用队列请求模块"><a href="#封装可利用队列请求模块" class="headerlink" title="封装可利用队列请求模块"></a>封装可利用队列请求模块</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ajax</span></span><br><span class="line"><span class="keyword">const</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, url)</span><br><span class="line">    xhr.send()</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队列处理</span></span><br><span class="line"><span class="keyword">const</span> queue = <span class="function"><span class="keyword">function</span>(<span class="params">requests</span>)</span>&#123;</span><br><span class="line">  requests.reduce(<span class="function">(<span class="params">promise,request</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//每次request中ajax的promise状态改变之后再接下一个request</span></span><br><span class="line">    <span class="keyword">return</span> promise.then(request)</span><br><span class="line">  &#125;,<span class="built_in">Promise</span>.resolve())</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr_req = [<span class="string">'url1'</span>,<span class="string">'url2'</span>,<span class="string">'url3'</span>].map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">      ajax(v).then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'doing something with values'</span>))<span class="comment">//这里返回一个可被then方法接收的函数</span></span><br><span class="line">    );</span><br><span class="line">queue(arr_req)</span><br></pre></td></tr></table></figure>

<h3 id="简单实现axios"><a href="#简单实现axios" class="headerlink" title="简单实现axios"></a>简单实现axios</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">axios</span></span>&#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      responseType: <span class="string">'json'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="keyword">constructor</span>(method,url,data,options)&#123;</span><br><span class="line">    <span class="keyword">this</span>.method = method;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">    <span class="keyword">this</span>.data = data;</span><br><span class="line">    <span class="keyword">this</span>.options = <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.options,options);</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      xhr.open(<span class="keyword">this</span>.method,<span class="keyword">this</span>.url);</span><br><span class="line">      xhr.responseType = <span class="keyword">this</span>.options.responseType</span><br><span class="line">      xhr.send(<span class="keyword">this</span>.data);</span><br><span class="line">      xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status===<span class="number">200</span>)&#123;</span><br><span class="line">          resolve(xhr.response);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          reject(xhr.statusText);</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span>(url,options)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>(<span class="string">'GET'</span>,url,<span class="literal">null</span>,options).xhr()</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">static</span> post(url,data,options)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">this</span>(<span class="string">'POST'</span>,url,data,options).xhr();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">axios.get(<span class="string">'http://localhost:5000/edu_policies'</span>).then(<span class="function"><span class="params">value</span>=&gt;</span><span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>



<h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><ul>
<li>在promise中代码与主线程中的优先级同步，但then方法之后的代码就会进入微任务队列等待主线程执行完毕后再执行。</li>
<li><code>promise</code> 的 then、catch、finally的方法都是异步任务</li>
<li>每次的 <code>then</code> 都是一个全新的 <code>promise</code>，默认 then 返回的 promise 状态是 fulfilled</li>
<li>promise.resolve可以resolve另一个待解决的promise</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Object in JavaScript</title>
    <url>/2020/cket8yx27001xalvg7sme3t73/</url>
    <content><![CDATA[<h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><p>对象和函数、数组一样是引用类型，即复制只会复制引用地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">"wang"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line"><span class="built_in">console</span>.log(obj1===obj2); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object Deconstruction</span></span><br><span class="line"><span class="keyword">let</span> web = &#123; <span class="attr">name</span>: <span class="string">"wang"</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;;</span><br><span class="line"><span class="comment">//把name赋值给变量w</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>:w, gender=<span class="string">"male"</span>&#125; = web;</span><br><span class="line"><span class="built_in">console</span>.log(w); <span class="comment">//'wang'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Rest parameters 展开语法</span></span><br><span class="line"><span class="keyword">let</span> web_new = &#123; ...web, <span class="attr">gender</span>: <span class="string">"male"</span>, <span class="attr">name</span>: <span class="string">"zhu"</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(web_new);</span><br><span class="line"><span class="built_in">console</span>.log(web)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object Deconstruction for function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">option = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//若右值不为空则取右值即参数option对象</span></span><br><span class="line">    <span class="comment">//默认option为空对象，因此取默认赋值</span></span><br><span class="line">    <span class="keyword">let</span> &#123; </span><br><span class="line">            width = <span class="number">200</span>, </span><br><span class="line">            height = <span class="number">200</span>, </span><br><span class="line">            backgroundColor = <span class="string">"red"</span>,</span><br><span class="line">            parentElement = <span class="string">"body"</span>,</span><br><span class="line">        &#125; = option;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(parentElement);</span><br><span class="line">    div.style.width = width + <span class="string">"px"</span>;</span><br><span class="line">    div.style.height = height + <span class="string">"px"</span>;</span><br><span class="line">    div.style.backgroundColor = backgroundColor;</span><br><span class="line">    container.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line">createElement(&#123;<span class="attr">backgroundColor</span>:<span class="string">"blue"</span>&#125;)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="对象值类型转换"><a href="#对象值类型转换" class="headerlink" title="对象值类型转换"></a>对象值类型转换</h3><ul>
<li>如果声明需要字符串类型，调用顺序为 <code>toString &gt; valueOf</code></li>
<li>如果场景需要数值类型，调用顺序为 <code>valueOf &gt; toString</code></li>
<li>声明不确定时使用 <code>default</code> ，大部分对象的 <code>default</code> 会当数值使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在对象内部自定义转换</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"string"</span>,</span><br><span class="line">  num: <span class="number">1</span>,</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"valueOf"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"toString"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(hd + <span class="number">1</span>); <span class="comment">//valueOf    2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is '</span>+obj); <span class="comment">//toString   this is string</span></span><br></pre></td></tr></table></figure>



<h3 id="检测属性"><a href="#检测属性" class="headerlink" title="检测属性"></a>检测属性</h3><p><code>hasOwnProperty</code>检测对象自身是否包含指定的属性，不检测原型链上继承的属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">'wangruoyu'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>使用<code>in</code>可以检测原型链上继承的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">'wangruoyu'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置hd为obj的新原型</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj1, obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj1); <span class="comment">// &#123;name:'wangruoyu'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"age"</span> <span class="keyword">in</span> obj1); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.hasOwnProperty(<span class="string">"age"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-assign-右侧合并"><a href="#Object-assign-右侧合并" class="headerlink" title="Object.assign 右侧合并"></a>Object.assign 右侧合并</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object assign</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement_2</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        width: <span class="number">200</span>,</span><br><span class="line">        height: <span class="number">200</span>,</span><br><span class="line">        backgroundColor: <span class="string">"red"</span>,</span><br><span class="line">        parentElement : <span class="string">"body"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//偏向右侧的合并 类似于sql中的RIGHT JOIN</span></span><br><span class="line">    options = <span class="built_in">Object</span>.assign(options, params);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(options, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(createElement_2(&#123;<span class="attr">width</span>:<span class="number">400</span>&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h2><p>由于对象是引用类型，因此直接复制操作实质是复制reference而不是值</p>
<p>下面通过几种方法来实现深浅拷贝：</p>
<p>Light-weight copy</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Duplicate object by for in</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">"wangruoyu"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  	newObj[key] = obj[key];</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duplicate object by assign</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Duplicate object by rest parameter</span></span><br><span class="line"><span class="keyword">var</span> copyWeb = &#123;...web&#125;;</span><br></pre></td></tr></table></figure>

<p>Deep Duplication</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Duplicate for Mutiple Deep Object</span></span><br><span class="line"><span class="keyword">let</span> deepObj = &#123;</span><br><span class="line">    user: <span class="string">"wang"</span>,</span><br><span class="line">    info: &#123;</span><br><span class="line">        age: <span class="number">22</span>,</span><br><span class="line">        gender: <span class="string">"male"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    arr: [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对于复杂结构的对象，浅拷贝方式会有问题</span></span><br><span class="line"><span class="comment">//像info,arr键中的值仍共享一个内存地址,如果变更则彼此都受牵连</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyDeepObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> deepObj) &#123;</span><br><span class="line">     copyDeepObj[key] = deepObj[key];</span><br><span class="line"> &#125;</span><br><span class="line">copyDeepObj.arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(copyDeepObj.arr) <span class="comment">// [0,20,30,40,50] </span></span><br><span class="line"><span class="built_in">console</span>.log(deepObj.arr) <span class="comment">//[0,20,30,40,50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用函数递归进行对象深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyDeepObject</span>(<span class="params">deepObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newObj = deepObj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> deepObj) &#123;</span><br><span class="line">        newObj[key] = <span class="keyword">typeof</span> deepObj[key] == <span class="string">'object'</span> ? copyDeepObject(deepObj[key]) : deepObj[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="属性封装和保护"><a href="#属性封装和保护" class="headerlink" title="属性封装和保护"></a>属性封装和保护</h2><p>利用闭包保护属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Infor</span>(<span class="params">name.age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123; name, age&#125;;</span><br><span class="line"> 		<span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> data.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> std = <span class="keyword">new</span> Infor(<span class="string">'wang'</span>,<span class="number">19</span>)</span><br><span class="line"><span class="built_in">console</span>.log(std.getAge()) <span class="comment">// 19</span></span><br></pre></td></tr></table></figure>

<p>获取/修改属性特征</p>
<table>
<thead>
<tr>
<th>Attributes</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td>configurable</td>
<td>whether can use delete property, change property attributes,edit getter or setter</td>
<td>true</td>
</tr>
<tr>
<td>enumerable</td>
<td>if this property shows up during enumeration of the properties on the corresponding object. Such as for/in, for/of or Object.keys() etc.</td>
<td>true</td>
</tr>
<tr>
<td>writable</td>
<td>whether the property can be changed</td>
<td>true</td>
</tr>
<tr>
<td>value</td>
<td>The value associated with the property</td>
<td>undefined</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  name:<span class="string">'wang'</span>,</span><br><span class="line">  age:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get property</span></span><br><span class="line"><span class="keyword">var</span> property = <span class="built_in">JSON</span>.stringify(<span class="built_in">Object</span>.getOwnPropertyDescriptors(a), <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Edit property</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, <span class="string">"age"</span>, &#123;</span><br><span class="line">    value: <span class="string">"22"</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Mutiple editing</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(b, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">"wang"</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prevent adding a new property to the Object</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isExtensible(a)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Seal Object (unabele to 'add,delete,redefine' properties)</span></span><br><span class="line"><span class="built_in">Object</span>.seal(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isSealed(a)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Freeze Object(unabele to 'add,delete,redefine,enumerate')</span></span><br><span class="line"><span class="built_in">Object</span>.freeze(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.isFrozen(a)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>访问器 getter &amp; setter</p>
<p>属性只能在访问器和普通属性任选其一，不能共同存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use set/get syntax to protect data</span></span><br><span class="line"><span class="keyword">var</span> setData = &#123;</span><br><span class="line">    data: &#123; <span class="attr">name</span>: <span class="string">"wang"</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">    <span class="keyword">set</span> age(age) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> age !== <span class="string">"number"</span> || age &lt; <span class="number">1</span> || age &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"wrong type of age"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> age() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setData.age = <span class="number">10</span> </span><br><span class="line"><span class="built_in">console</span>.log(setData.age) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<p>利用访问器来储存和获取token into localStorage</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// token in localStorage</span></span><br><span class="line"><span class="keyword">let</span> Request = &#123;</span><br><span class="line">    <span class="keyword">set</span> token(content) &#123;</span><br><span class="line">        localStorage.setItem(<span class="string">"token"</span>, content);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span> token() &#123;</span><br><span class="line">        <span class="keyword">var</span> token = localStorage.getItem(<span class="string">"token"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">            alert(<span class="string">"please, log in "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Request.token = <span class="string">'wwqeawdafaf'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(Request.token) <span class="comment">//'wwqeawdafaf'</span></span><br></pre></td></tr></table></figure>

<p>利用Symbol来是封装属性不能被外界访问，利用访问器控制可访问的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DATA = <span class="built_in">Symbol</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Infor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">        <span class="keyword">this</span>[DATA] = &#123; name, age &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[DATA].name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.this[DATA] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ls = <span class="keyword">new</span> Infor(<span class="string">"wang"</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ls) <span class="comment">//只能修改和访问name</span></span><br></pre></td></tr></table></figure>

<h2 id="代理拦截"><a href="#代理拦截" class="headerlink" title="代理拦截"></a>代理拦截</h2><p>代理（拦截器）是对象的访问控制，<code>setter/getter</code> 是对单个对象属性的控制，而代理是对整个对象的控制。</p>
<ul>
<li>读写属性时代码更简洁</li>
<li>对象的多个属性控制统一交给代理完成</li>
<li>严格模式下 <code>set</code> 必须返回布尔值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gf = &#123; <span class="attr">name</span>: <span class="string">"zuomeng"</span>,<span class="attr">age</span>:<span class="number">22</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(gf, &#123;</span><br><span class="line">    <span class="keyword">get</span>(obj, property) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[property];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(obj, property, value) &#123;</span><br><span class="line">        obj[property] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/proxy.name = <span class="string">"wang"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.name)</span><br></pre></td></tr></table></figure>

<p>代理函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num == <span class="number">1</span> ? <span class="number">1</span> : num * factorial(num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func_proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(factorial, &#123;</span><br><span class="line">    apply(func, obj, args) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(func) <span class="comment">// factorial(num)&#123;...&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(obj); <span class="comment">//&#123;test:"test result"&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(args); <span class="comment">// [3]</span></span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">"Time"</span>);</span><br><span class="line">        <span class="keyword">var</span> result = func.apply(obj,args)</span><br><span class="line">        <span class="built_in">console</span>.log(result); <span class="comment">// 6</span></span><br><span class="line">        <span class="built_in">console</span>.timeEnd(<span class="string">"Time"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">func_proxy.apply(&#123;<span class="attr">test</span>:<span class="string">"test result"</span>&#125;, [<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>利用代理截取字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stringDot = &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, key) &#123;</span><br><span class="line">    <span class="keyword">const</span> title = target[key].title;</span><br><span class="line">    <span class="keyword">const</span> len = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">return</span> title.length &gt; len</span><br><span class="line">      ? title.substr(<span class="number">0</span>, len) + <span class="string">"."</span>.repeat(<span class="number">3</span>)</span><br><span class="line">      : title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> news = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"这是一个伤不起的标题"</span>,</span><br><span class="line">    category: <span class="string">"政治"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"没有这个的标题"</span>,</span><br><span class="line">    category: <span class="string">"社会"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"我想成为一个独一无二的好标题"</span>,</span><br><span class="line">    category: <span class="string">"经济"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stringDotProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(news, stringDot);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> lessons) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stringDotProxy[index]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><h3 id="利用代理绑定"><a href="#利用代理绑定" class="headerlink" title="利用代理绑定"></a>利用代理绑定</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Two-way-binding</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">View</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="keyword">get</span>(obj, property) &#123;&#125;,</span><br><span class="line">        <span class="keyword">set</span>(obj, property, value) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj);</span><br><span class="line">            <span class="built_in">console</span>.log(property);</span><br><span class="line">            <span class="built_in">console</span>.log(value);</span><br><span class="line">            <span class="built_in">document</span>.querySelectorAll(<span class="string">`[v-model ="<span class="subst">$&#123;property&#125;</span>"]`</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.value = value;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">document</span>.querySelectorAll(<span class="string">`[v-bind ="<span class="subst">$&#123;property&#125;</span>"]`</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.innerHTML = value;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">"[v-model]"</span>);</span><br><span class="line">        els.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            item.addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//使用代理压入属性与值</span></span><br><span class="line">                proxy[<span class="keyword">this</span>.getAttribute(<span class="string">"v-model"</span>)] = <span class="keyword">this</span>.value;</span><br><span class="line">            &#125;);</span><br><span class="line">            item = <span class="literal">null</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> View().init()</span><br></pre></td></tr></table></figure>

<p>普通类函数绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MutualBinding</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(property)&#123;</span><br><span class="line">        <span class="keyword">this</span>.property = property;</span><br><span class="line">    &#125;;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelectorAll(<span class="string">`[v-model ="<span class="subst">$&#123;<span class="keyword">this</span>.property&#125;</span>"]`</span>).forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">            item.addEventListener(<span class="string">'keyup'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                self.binder(<span class="keyword">this</span>.value)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    binder(value)&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelectorAll(<span class="string">`[v-model ="<span class="subst">$&#123;<span class="keyword">this</span>.property&#125;</span>"]`</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.value = value;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="built_in">document</span>.querySelectorAll(<span class="string">`[v-bind ="<span class="subst">$&#123;<span class="keyword">this</span>.property&#125;</span>"]`</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item.innerHTML = value;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> eles = <span class="built_in">document</span>.querySelectorAll(<span class="string">"[v-model]"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> MutualBinding(<span class="string">'content'</span>).init();</span><br><span class="line"><span class="keyword">new</span> MutualBinding(<span class="string">'title'</span>).init();</span><br></pre></td></tr></table></figure>

<h3 id="代理表单验证"><a href="#代理表单验证" class="headerlink" title="代理表单验证"></a>代理表单验证</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body &#123;</span><br><span class="line">    padding: 50px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#34495e</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  input &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 10<span class="selector-tag">px</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">    height: 30px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.error</span> &#123;</span></span><br><span class="line">    border: solid 10px red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">validate</span> <span class="attr">rule</span>=<span class="string">"max:12,min:3"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">validate</span> <span class="attr">rule</span>=<span class="string">"max:3,isNumber"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">  "use strict"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//验证处理类</span></span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">class</span> <span class="title">Validate</span> </span>&#123;</span></span><br><span class="line">    max(value, len) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> value.length &lt;= len;</span></span><br><span class="line">    &#125;</span><br><span class="line">    min(value, len) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> value.length &gt;= len;</span></span><br><span class="line">    &#125;</span><br><span class="line">    isNumber(value) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="regexp">/^\d+$/</span>.test(value);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//代理工厂</span></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">makeProxy</span><span class="params">(target)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">get</span>(target, key) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> target[key];</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="keyword">set</span>(target, key, el) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> rule = el.getAttribute(<span class="string">"rule"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> validate = <span class="keyword">new</span> Validate();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> state = rule.split(<span class="string">","</span>).every(<span class="function"><span class="params">rule</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> info = rule.split(<span class="string">":"</span>);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> validate[info[<span class="number">0</span>]](el.value, info[<span class="number">1</span>]);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        el.classList[state ? <span class="string">"remove"</span>:<span class="string">"add"</span>](<span class="string">"error"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> nodes = makeProxy(<span class="built_in">document</span>.querySelectorAll(<span class="string">"[validate]"</span>));</span></span><br><span class="line"><span class="javascript">  nodes.forEach(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">    item.addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      nodes[i] = <span class="keyword">this</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ul>
<li>对象是属性和方法的集合即封装</li>
<li>将复杂功能隐藏在内部，只开放给外部少量方法，更改对象内部的复杂逻辑不会对外部调用造成影响即抽象</li>
<li>继承是通过代码复用减少冗余代码</li>
<li>根据不同形态的对象产生不同结果即多态</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Prototype in JavaScript</title>
    <url>/2020/cket8yx280020alvga5954rs0/</url>
    <content><![CDATA[<h2 id="JavaScript-所有对象都是对象的实例"><a href="#JavaScript-所有对象都是对象的实例" class="headerlink" title="JavaScript: 所有对象都是对象的实例"></a>JavaScript: 所有对象都是对象的实例</h2><p>MDN：</p>
<blockquote>
<p> JavaScript only has one construct: objects.</p>
</blockquote>
<p>什么是原型链？</p>
<blockquote>
<p>When trying to access a property of an object, <strong>the property will not  only be sought on the object but on the prototype of the object,</strong> the  prototype of the prototype, and so on until either a property with a  matching name is found or the end of the prototype chain is reached.</p>
</blockquote>
<h3 id="prototype-vs-proto"><a href="#prototype-vs-proto" class="headerlink" title="prototype vs __proto__"></a><code>prototype</code> vs <code>__proto__</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( <span class="keyword">new</span> Foo ).__proto__ === Foo.prototype;</span><br><span class="line">( <span class="keyword">new</span> Foo ).prototype === <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Foo(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Foo(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p>Constructor  function Foo also has its own <code>__proto__</code> which is Function.prototype</p>
<p><code>__proto__</code> is the actual object that is used in the lookup chain to resolve methods, etc.  <code>prototype</code> is the object that is used to build <code>__proto__</code> when you create an object with <code>new</code></p>
<p><img src="/2020/cket8yx280020alvga5954rs0/inherit.png" alt="inherit"></p>
<p><strong><code>__proto__</code> 不是对象属性，理解为<code>prototype</code> 的 <code>getter/setter</code> 实现，是一个非标准定义</strong> <code>__proto__</code> 内部使用<code>getter/setter</code> 控制值，所以只允许对象或null.</p>
<a id="more"></a>

<p>因此，可以使用  <code>Object.setPrototypeOf</code> 与<code>Object.getProttoeypOf</code>  替代 <code>__proto__</code></p>
<h3 id="通过原型创造对象"><a href="#通过原型创造对象" class="headerlink" title="通过原型创造对象"></a>通过原型创造对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"show method"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(obj1 <span class="keyword">instanceof</span> Foo) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> obj1.constructor();</span><br><span class="line"><span class="built_in">console</span>.log(obj2 <span class="keyword">instanceof</span> Foo) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">Object</span>.getPrototypeOf(obj1).constructor;</span><br><span class="line"><span class="built_in">console</span>.log(obj3 === Foo)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="设置原型链-Object-setPrototype"><a href="#设置原型链-Object-setPrototype" class="headerlink" title="设置原型链 Object.setPrototype"></a>设置原型链 <code>Object.setPrototype</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo =  &#123;</span><br><span class="line">  name:<span class="string">'ruoyu'</span>,</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"show method"</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(a, foo);</span><br><span class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">// 'ruoyu'</span></span><br><span class="line"><span class="built_in">console</span>.log(a.show()) <span class="comment">// 'show method'</span></span><br></pre></td></tr></table></figure>

<p>上述代码中<code>a</code>利用<code>setPrototyoeOf</code>继承了<code>foo</code>对象中的方法和属性</p>
<h3 id="原型检测"><a href="#原型检测" class="headerlink" title="原型检测"></a>原型检测</h3><p><code>instanceof</code> 检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> Foo) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><code>isPrototypeOf</code>检测一个实例对象是否在另一个实例对象的原型链中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"show method"</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line">  <span class="keyword">let</span> b = <span class="keyword">new</span> Foo();</span><br><span class="line">  <span class="built_in">Object</span>.setPrototypeOf(a,b);</span><br><span class="line"><span class="built_in">console</span>.log(a.isPrototypeOf(b))  <span class="comment">//false</span></span><br><span class="line">  <span class="built_in">console</span>.log(b.isPrototypeOf(a))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="属性便利"><a href="#属性便利" class="headerlink" title="属性便利"></a>属性便利</h3><p>使用<code>in</code> 检测原型链上是否存在属性，使用 <code>hasOwnProperty</code> 只检测当前对象</p>
<p>使用 <code>for/in</code> 遍历时同时会遍历原型上的属性</p>
<h3 id="Object-create-使用"><a href="#Object-create-使用" class="headerlink" title="Object.create 使用"></a><code>Object.create</code> 使用</h3><p>创建一个新对象时使用现有对象做为新对象的原型对象，第二个可选参数设置新对象的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"show method"</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.create(a,&#123;</span><br><span class="line">  name:&#123;<span class="attr">value</span>:<span class="string">'ruoyu'</span>&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// Foo &#123;name: "ruoyu"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(b.show()) <span class="comment">// 'show method'</span></span><br></pre></td></tr></table></figure>

<p>Conclusion:</p>
<p><code>prototype</code> 构造函数的原型属性</p>
<p><code>Object.create</code> 创建对象时指定原型</p>
<p><code>Object.setPrototypeOf</code> 设置对象原型</p>
<h3 id="添加原型方法避免内存占用"><a href="#添加原型方法避免内存占用" class="headerlink" title="添加原型方法避免内存占用"></a>添加原型方法避免内存占用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Foo(<span class="string">'ruoyu'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Foo(<span class="string">'wang'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.getName == b.getName); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>使用Objcet.assgin给原型添加方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assgin(Foo.prototype,&#123;</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="原型的继承"><a href="#原型的继承" class="headerlink" title="原型的继承"></a>原型的继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(Foo.prototype,&#123;</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;,</span><br><span class="line">  name:<span class="string">'ruoyu'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is <span class="subst">$&#123;<span class="keyword">this</span>,age&#125;</span> years old.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype = <span class="built_in">Object</span>.create(Foo.prototype) <span class="comment">//继承方法和属性</span></span><br><span class="line">Sub.prototype.constructor = Sub <span class="comment">//保留构建者</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Sub(<span class="number">18</span>).getName())<span class="comment">// ruoyu</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Sub(<span class="number">18</span>).show())<span class="comment">// ruoyu is 18 years old.</span></span><br></pre></td></tr></table></figure>

<h3 id="原型方法重写"><a href="#原型方法重写" class="headerlink" title="原型方法重写"></a>原型方法重写</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;<span class="keyword">this</span>.name = name&#125;;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name +<span class="string">" calls parent method"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;<span class="keyword">this</span>.name = name&#125;;</span><br><span class="line">User.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">User.prototype.constructor = User;</span><br><span class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Person.prototype.getName.call(<span class="keyword">this</span>);  <span class="comment">//可以调用父级同名方法</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name +<span class="string">" calls new method"</span>);<span class="comment">// 新方法</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> User(<span class="string">'ruoyu'</span>).getName() </span><br><span class="line"><span class="comment">// ruoyu calls parent method</span></span><br><span class="line"><span class="comment">// ruoyu calls new method</span></span><br></pre></td></tr></table></figure>

<h3 id="call-apply-在构造函数中的应用"><a href="#call-apply-在构造函数中的应用" class="headerlink" title="call | apply 在构造函数中的应用"></a>call | apply 在构造函数中的应用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fake</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Foo.call(<span class="keyword">this</span>,name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Fake(<span class="string">'ruoyu'</span>)) <span class="comment">// &#123;name:ruoyu&#125;</span></span><br></pre></td></tr></table></figure>





<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><ul>
<li><p>如果对象本身不存在属性或方法将到原型上查找</p>
</li>
<li><p>使用原型可以解决，通过构建函数创建对象时复制多个函数造成的内存占用问题</p>
</li>
<li><p>原型包含 <code>constructor</code> 属性，指向构造函数</p>
</li>
<li><p>所有函数的原型默认是 <code>Object</code>的实例，所以可以使用<code>toString/toValues/isPrototypeOf</code> 等方法的原因</p>
</li>
<li><p>原型中保存引用类型会造成对象共享属性，所以一般只会在原型中定义方法。</p>
</li>
<li><p>如果对象和原型中属性重叠，则对象中的属性优先级高于原型中的属性</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react-pattern</title>
    <url>/2020/cket8yx290022alvgci0z64bv/</url>
    <content><![CDATA[<h1 id="Pattern-of-React-Components"><a href="#Pattern-of-React-Components" class="headerlink" title="Pattern of React Components"></a>Pattern of React Components</h1><ul>
<li>Stateless Components Can Be Written As A Function</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> statelessComp = <span class="function">(<span class="params">props</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> message = props.message;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;stateless Components&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;&#123;message&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">statelessComp = &#123;</span></span><br><span class="line"><span class="regexp">  message: React.PropTypes.string.isRequired</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>One of the most common programming patterns in React is to use stateful parent components to maintain their own state and pass it down to one or more stateless child components as props.</p>
</li>
<li><p>A React component should use state to store information that the component itself can change</p>
</li>
<li><p>A React component should never change its Props value.</p>
</li>
<li><p>Stateful Components pass event method as props to Stateless Components. Then, Stateless Components create a eventHandler method in order to change the state of Stateful Components.</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//This is a stateless child component.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">babyYoda</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>I am &#123;this.props.name&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//This is a stateful Parent element.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yoda</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">name</span>: <span class="string">'Toyoda'</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//The child component is rendering information passed down from the Parent component. </span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">babyYoda</span> <span class="attr">name</span>=<span class="string">&#123;this.state.name&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Another programming patterns is <strong>Container Components From Presentational Components</strong><blockquote>
<p>Use Container Components to do logical calculation.<br>Use Presentational Components to render JSX elements.</p>
</blockquote>
</li>
</ul>
<p>使用默认props和设定props属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import PropTypes from &#39;prop-types&#39;;</span><br><span class="line"></span><br><span class="line">class NavBar extends Component&#123;</span><br><span class="line">  static defaultProps&#x3D;&#123;</span><br><span class="line">    titile:&#39;something on the top&#39;,</span><br><span class="line">    icon:&#39;fab fa-gihub&#39;</span><br><span class="line">  &#125;;</span><br><span class="line">  static propTypes &#x3D; &#123;</span><br><span class="line">    titile:PropTypes.string.isRequired,</span><br><span class="line">    icon:PropTypes.string.isRequired,</span><br><span class="line">  &#125;</span><br><span class="line">	render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;h1&gt;&lt;i className&#x3D;&#123;this.props.icon&#125;&gt;&lt;&#x2F;i&gt;&#123;this.props.title&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;&#x2F;nav&gt;		</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Functional compoents</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import PropTypes from &#39;prop-types&#39;;</span><br><span class="line"></span><br><span class="line">const NavBar &#x3D; (props)&#x3D;&gt;&#123;</span><br><span class="line">  return (</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;h1&gt;&lt;i className&#x3D;&#123;props.icon&#125;&gt;&lt;&#x2F;i&gt;&#123;props.title&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;&#x2F;nav&gt;		</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">NavBar.defaultProps&#x3D;&#123;</span><br><span class="line">    titile:&#39;something on the top&#39;,</span><br><span class="line">    icon:&#39;fab fa-gihub&#39;</span><br><span class="line">  &#125;;</span><br><span class="line">NavBar.propTypes &#x3D; &#123;</span><br><span class="line">    titile:PropTypes.string.isRequired,</span><br><span class="line">    icon:PropTypes.string.isRequired,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>Save local environment variables</p>
<ul>
<li>Create .env.local file in root directory </li>
<li>set key-value pair to create variables</li>
<li>then the variables can be accessed by <code>process.env.${key}</code></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>useBreakPointHook</title>
    <url>/2020/cket8yx2b0025alvgbqhw7q0x/</url>
    <content><![CDATA[<h1 id="useBreakpoint-Hook-—在React中获取媒体查询断点"><a href="#useBreakpoint-Hook-—在React中获取媒体查询断点" class="headerlink" title="useBreakpoint Hook —在React中获取媒体查询断点"></a>useBreakpoint Hook —在React中获取媒体查询断点</h1><h3 id="怎么测量窗口宽度？"><a href="#怎么测量窗口宽度？" class="headerlink" title="怎么测量窗口宽度？"></a>怎么测量窗口宽度？</h3><p>要获取断点，我们需要测量浏览器的宽度，然后在<code>window</code>对象上获取该宽度。<code>window</code>对象具有两个宽度：<code>outerWidth</code>和<code>innerWidth</code>，这里我们使用<code>innerWidth</code>。</p>
<p><code>window.innerWidth</code>每当我们调整窗口大小时，我们都会进行测量。</p>
<p><code>window.addEventListener（&#39;resize&#39;，dosomethingWithWidth）</code></p>
<p>因此，每当我们调整窗口大小时，<code>resize</code>都会触发该事件并计算<code>innerWidth</code>，但是实现这样的事情存在一个小问题，每当我们重新调整窗口大小时，都会触发回调函数, 回影响运行性能。因此这里我们可以使用节流函数来减少触发频率。关于节流函数详情请看<a href="https://www.wangruoyu.digital/2020/ckd6kbou9000044sj4w3t5vt0/" target="_blank" rel="noopener">节流函数与防抖函数</a>.</p>
<h3 id="计算Breakpoint"><a href="#计算Breakpoint" class="headerlink" title="计算Breakpoint"></a>计算Breakpoint</h3><p>基于常见设备类型的Breakpoint</p>
<ul>
<li>如果宽度小于320像素，则该设备会特别小，以表示<code>xs</code>。</li>
<li>如果宽度等于或大于320像素且小于720像素，则该设备很小，由表示<code>sm</code>。</li>
<li>如果宽度等于或大于720像素且小于1024像素，则该设备为中等，由表示<code>md</code>。</li>
<li>如果宽度等于或大于1024px，则该设备很大，由表示<code>lg</code>。</li>
</ul>
<h3 id="useBreakpoint-Hook"><a href="#useBreakpoint-Hook" class="headerlink" title="useBreakpoint Hook"></a>useBreakpoint Hook</h3><p>现在连接React中的所有零碎部分，以获得完整的<code>useBreakpoint</code>自定义Hook。</p>
<p>首先，我们将使用<code>useState</code>挂钩创建状态，该状态将存储我们当前的设备类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>  getDeviceBp  =  <span class="function">(<span class="params">width</span>) =&gt;</span>  &#123;</span><br><span class="line">  <span class="keyword">if</span>(width &lt; <span class="number">320</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xs'</span></span><br><span class="line">  &#125;  <span class="keyword">else</span>  <span class="keyword">if</span> (width &gt; = <span class="number">320</span>  &amp;&amp;  width  &lt;  <span class="number">720</span>  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> “ sm”</span><br><span class="line">  &#125;  <span class="keyword">else</span>  <span class="keyword">if</span> (width &gt; = <span class="number">720</span>  &amp;&amp;  width  &lt;  <span class="number">1024</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'md'</span></span><br><span class="line">  &#125;  <span class="keyword">else</span>  <span class="keyword">if</span> (width &gt; = <span class="number">1024</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> “ lg”</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [brkPnt，setBrkPnt] = useState(<span class="function"><span class="params">()</span>=&gt;</span> getDeviceConfig（<span class="built_in">window</span>.innerWidth））</span><br></pre></td></tr></table></figure>

<p>其次，我们使用<code>useEffect</code>来监听变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">window</span>.addEventListener（<span class="string">'resize'</span>，throttle(setBrkPnt(getDeviceBp(<span class="built_in">window</span>.innerWidth))))</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>

<p>最后，为了防止每次调用hook时就注册监听事件，并且在组件卸载时候注销我们我们需要从<code>useEffect</code>回调函数中返回一个函数，该回调函数将在我们的组件被卸载时执行，并将所有逻辑放入其中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> calInnerWidth = throttle(setBrkPnt(getDeviceBp(<span class="built_in">window</span>.innerWidth)));</span><br><span class="line">	<span class="built_in">window</span>.addEventListener（<span class="string">'resize'</span>，calInnerWidth)</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>，calInnerWidth)</span><br><span class="line">&#125;,[]）</span><br></pre></td></tr></table></figure>



<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState, useEffect&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> throttle <span class="keyword">from</span> <span class="string">'./throttle'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  getDeviceBp  =  <span class="function">(<span class="params">width</span>) =&gt;</span>  &#123;</span><br><span class="line">  <span class="keyword">if</span>(width &lt; <span class="number">320</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'xs'</span></span><br><span class="line">  &#125;  <span class="keyword">else</span>  <span class="keyword">if</span> (width &gt; = <span class="number">320</span>  &amp;&amp;  width  &lt;  <span class="number">720</span>  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> “ sm”</span><br><span class="line">  &#125;  <span class="keyword">else</span>  <span class="keyword">if</span> (width &gt; = <span class="number">720</span>  &amp;&amp;  width  &lt;  <span class="number">1024</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'md'</span></span><br><span class="line">  &#125;  <span class="keyword">else</span>  <span class="keyword">if</span> (width &gt; = <span class="number">1024</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> “ lg”</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useBreakpoint = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [brkPnt，setBrkPnt] = useState(<span class="function"><span class="params">()</span>=&gt;</span> getDeviceConfig（<span class="built_in">window</span>.innerWidth））</span><br><span class="line">  </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> calInnerWidth = throttle(setBrkPnt(getDeviceBp(<span class="built_in">window</span>.innerWidth)));</span><br><span class="line">    <span class="built_in">window</span>.addEventListener（<span class="string">'resize'</span>，calInnerWidth)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>，calInnerWidth)</span><br><span class="line">  &#125;,[]）</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> brkPnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useBreakpoint;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react.js</tag>
      </tags>
  </entry>
</search>
